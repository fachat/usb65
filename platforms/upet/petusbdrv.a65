/*
    (C) 2011-2013 Andre Fachat

    This file is part of the 6502 USB Host Driver.

    The 6502 USB Host Driver is free software: you can redistribute it and/or modify
    it under the terms of the Lesser GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    The 6502 USB Host Driver is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    Lesser GNU General Public License for more details.

    You should have received a copy of the Lesser GNU General Public License
    along with the 6502 USB Host Driver. If not, see <http://www.gnu.org/licenses/>.
*/

/*
 * this code installs the USB driver at the end of the PET 32k RAM
 * and patches it into the interrupt routine, so that it can
 * run in background and be used as keyboard driver
 *
 * (C) 2011 A. Fachat
 */

#undef	DEBUG
#undef	DEBUG_POLL
#undef	DEBUG_HW

#define	XMAX	#9	; at $e3 for 80 cols, or $03eb for 40 cols - so use constant

#include "hostmsg.i65"

	.zero

; all pointers are used only by TAPE code
; print routine pointer
ZPRINTPTR	=$b1
; device driver pointer
ZUDEVPTR1	=$b7; 	$ce	; $b7 (conflict with editor ROM project - escape codes)
; general pointer within USB code
ptr		=$bb
; debug code pointer (to save inline string address)
dbg_ptr		=$bd

	.(
	.text

#ifdef DEBUG
DBGBASE		=$8028		; screen plus one line, so PETUSBKBD can use first line
SCRBASE		=$8028		; screen plus one line, so PETUSBKBD can use first line
#else
SCRBASE		=$8000
#endif

IRQV	=$0090
BRKV	=$0092
BRKJMP	=$E44F

	jmp init		; +0
	jmp print		; +3
	jmp scr_flush		; +6
	jmp prversion		; +9
	jmp start2		; +12
	jmp init_scr		; +15
	jmp startint		; +18
	jmp endint		; +21

/* current screen column for debug, so we can enter cr when appropriate */

	.(
	.data
irqv	.word 0
brkv	.word 0
lock	.byt 0
	.text

&init	jsr setup_io
	jmp usb_init

&start2	
	lda #0
	sta lock
	rts

&startint 

	jsr scr_flush

	; patch the poll routine into the interrupt routine
	; a specific memory location is used as a lock 
	; Once in the routine, interrupts are allowed again, but
	; the usb driver is not entered again until the poll is done
	php
	sei
	lda #<-1	; first lock, so that only MOTOR line is held, but no USB stuff
	sta lock

	lda IRQV
	sta irqv
	lda IRQV+1
	sta irqv+1

	lda BRKV
	sta brkv
	lda BRKV+1
	sta brkv+1

	; several places in the kernal check via $f92b if the interrupt vector is 
	; on page $e4xx - otherwise they hang. This is presumably to wait for the
	; end of tape operations.
	;
	; We hack this by setting the interrupt vector to the indirect jump for the
	; BRK vector - and then redirecting the BRK vector to our code....
	;
	lda #<newirq
	sta BRKV
	lda #>newirq
	sta BRKV+1

	lda #<BRKJMP
	sta IRQV
	lda #>BRKJMP+1
	sta IRQV+1

	plp		; implicit cli
	rts

&endint
	php
	sei
	lda irqv
	sta IRQV
	lda irqv+1
	sta IRQV+1
	lda brkv
	sta BRKV
	lda brkv+1
	sta BRKV+1
	plp
	rts

	;-------------------------------
	; new interrupt routine
newirq
	; The first part is such a BAD HACK(tm)
	;
	; After IEC load, the kernal calls F92B, assumingly to check
	; the RUN/STOP key a last time. But starting from F92E it checks
	; whether the interrupt vector is set to page $E4xx - and if not,
	; just loops! One way around this is the following
	; BAD HACK:
	; in the interrupt routine, we check whether we have interrupted the
	; code in just this place, and then forward the RTI address on the
	; stack such that the check is ignored.
	; However, it seems there are conditions where this still did not 
	; trigger. My assumption is that the number of cycles for a screen
	; (interrupt) is similar to when checking the STOP key in the loop
	; So, instead, we re-purpose the BRK vector jump, which is at 
	; $E44F and use the BRK code instead
	; 
	tsx

	lda $0104,x	; SR
	and #$10	; BRK flag
	beq nobrk
	jmp (brkv)
nobrk
	;lda $0106,x
	;bpl nopoll
;	cmp #$f9
;	bne nohack	;no hack needed
;	lda $0105,x
;	cmp #$2b
;	beq hack
;	cmp #$2e
;	beq hack
;	cmp #$30
;	bne nohack
;hack	lda #$34
;	sta $0105,x
;nohack
	;-------------------------------
	; debug output
#ifdef DEBUG
lda $0105,x
sta $8000
lda $0106,x
sta $8001
lda lock
sta $8002
	inc DBGBASE+0
	lda $96		; kernel status
	sta DBGBASE+1
	lda lock
	sta DBGBASE+2
	lda $e840
	sta DBGBASE+5
#endif
	;-------------------------------
	; protect IEEE488 
	lda $e840
	and #$c1	; NRFDin, NDACin, DAVin
	cmp #$c1	; active? then do not poll, as we might interfere with IEEE488 timing
	bne nopoll

	lda $0106,x	; protect all interrupts in $f0xx-$f1xx
	and #$f0
	cmp #$f0
	beq nopoll
	
	;-------------------------------
	; check soft lock
	; no race condition, we can safely assume to not be interrupted (on single-cpu)

	lda lock
	bpl poll

	; back into original irq routine
nopoll	jmp newirq2

	;-------------------------------
	; poll the USB bus
poll
	;inc 59520+34	; border color

#ifdef DEBUG
	tsx
	lda $0105,x
	sta DBGBASE+3
	lda $0106,x
	sta DBGBASE+4
#endif

	dec lock	; lock so we don't get into poll again for now; results in $ff
	php
	;cli		; allow interrupts again (we need them in the driver - if VDRIVE/keypress are not skipped)
			; this actually directly goes back into the IRQ routine, as we haven't
			; cleared the IRQ yet. Only now the lock above protects the routine,
			; and the normal irq is executed
			; note: if cli is not executed, exit from poll must go to newirq2
	jsr usb_polldev
	bcc retirq

error
	ldy #ERR_DEVICE
	jsr printx
retirq	
	; flush last message to screen
	jsr scr_flush

	;dec 59520+34	; border color

	plp		; implicit sei if cli above

	; free lock
	inc lock

	jmp newirq2

	; return into original program (as if from interrupt)
;	pla
;	tay
;	pla
;	tax
;	pla
;	rti
	.)

+waitkey .(
	rts
;	ldy #MSG_WAIT_KEY
;	jsr print
;l	jsr $f335
;	bne l
;	rts
	.)

prversion .(
	tax
	bne v15
	ldy #MSG_V12
	.byt $2c
v15	ldy #MSG_V15
	jmp print
	.)

VCOUNT=$99

; pause a given number of vertical screen retraces (1/50th seconds)
; in AC has number of frames (retraces)
+pause   .(
;	jmp waitloop
	php
	cli
	tax
	inx           ; full retraces, so one more border between traces
p0	lda VCOUNT
p1	cmp VCOUNT
	beq p1
	dex
	bne p0
	plp
	rts
	.)

	;----------------------------------------------------------------
	; those callbacks are being called from the driver, i.e. 
	; actually from within somewhere in the code. We need
	; to protect the output

; callback from the keyboard code
; ac contains key from keyboard (in PETSCII)
&usb_kbd_rx_key_cb .(
	jsr printc2
	rts
	.)
	

; callback from the mouse code
; ac contains buttons
; x/y contain x resp. y displacement
&usb_mouse_rx_cb .(

	and #$07
	beq nom
	cmp #1		; mouse button 1
	bne nocr

	lda #13		; output CR for mouse button 1
	jsr printc2
	jmp nom

nocr	pha 
	lda #"M"
	jsr printc2
	pla
	ora #"0"
	jsr printc2
nom	
	txa
	beq nox
	rol		; bit 7 into carry
	txa		; restore orig value
	ror		; carry into bit, sign-extended shift right
	tax
	bmi left
right	lda #$1d
	jsr printc2
	;dex		; do not loop, as this makes the mouse way too fast
	;bne right
	;beq nox
	bne nox		; printc has php/plp pair
left	lda #$9d
	jsr printc2
	;inx
	;bne left
nox
	tya
	beq noy
	rol
	tya
	ror
	tay
	bmi up
down	lda #$11
	jsr printc2
	;dey
	;bne down
	;beq noy
	bne noy
up	lda #$91
	jsr printc2
	;iny
	;bne up
noy
	rts
	.)

	;----------------------------------------------------------------
	; virtual screen to print to from driver
	; print output is collected, and - if there is something - 
	; recalled at the end of the poll, waiting for a key
	; to clear the buffer
	.(
tmpx	.byt 0
tmpy	.byt 0
tmpc	.byt 0

line	.byt 0	; current line
col	.byt 0	; current col
+SCREENCOL=col

colp	.byt 0, 40, 80, 120, 160, 200

LINES	=6	; 6 lines
COLS	=40	; with 40 cols each (max below 256 bytes)
SCRLEN	=LINES*COLS

SCREEN	=SCRBASE

&init_scr .(
	jsr clrscr
	rts
	.)

&printc2 .(
	; write a char into the key buffer (if not filled already)
	php
	sei
	stx tmpx
	ldx $9e
	cpx XMAX
	bcs full
	sta $026f,x
	inc $9e
full 	ldx tmpx
	plp
	rts
	.)

+printc	.(
	stx tmpx
	sty tmpy
	sta tmpc
	cmp #$20
	bcs printable
	cmp #13
	beq nextl
printable
	ldy line
	lda colp,y
	clc
	adc col
	tay
	lda tmpc
	and #$ff-$40	; to screen code
	ora #$80	; invers
	sta screenbuf,y
nextc	inc col
	lda col
	cmp #COLS
	bcc endprint
nextl	lda #0
	sta col
	inc line
	lda line
	cmp #LINES
	bcc endprint
	jsr show
endprint
	ldx tmpx
	ldy tmpy
	lda tmpc
	rts
	.)

clrscr 	.(
	ldy #0
	sty line
	sty col
	lda #$a0	; space, inverted
	ldy #SCRLEN
l	sta screenbuf-1,y
	dey
	bne l
	rts
	.)

&scr_flush .(
	lda col
	ora line
	beq noshow
	jsr show
noshow	rts
	.)

	; this routine swaps the screenbuf with the start of the actual screen
	; then waits for a keypress
show	.(
	jsr swap
	jsr waitkeypress
	jsr swap
	jsr clrscr
	rts
	.)

waitkeypress .(
;	jmp waitloop
	php
	cli
l	lda $9e
	beq l
	sei
	jsr $e003	; does a CLI at the end
	plp
	rts
	.)

swap	.(
	ldy #SCRLEN
sl	ldx screenbuf-1,y
	lda SCREEN-1,y
	sta screenbuf-1,y
	txa
	sta SCREEN-1,y
	dey
	bne sl
	rts
	.)

screenbuf .dsb SCRLEN

waitloop
	.(
	ldx #0
	ldy #0
l	dex
	bne l
	dey
	bne l
	rts
	.)

	.)

newirq2  .(
        ; the PET sets the MTR line on the tape, no matter what,
        ; esp. with the SENSE line.
        ; So we need to emulate the original IRQ routine up to the 
        ; point behind that MTR code
        jsr $f768       ; update jiffy
        ; cursor handling
        lda $a7		; cursor blink enable
        bne e474        ; no, then end
        dec $a8		; blink counter
        bne e474        ; not done yet, then end

        lda #$14
        sta $a8		; reset cursor time counter

        ldy $c6		; cursor current column
        lsr $aa		; b0 last cursor state flag
        lda ($c4),y	; load screen char
        bcs e476        ; cursor toggle bit was set, skip
        inc $aa		; cursor toggle bit was not set, set it
        sta $a9		; store char under cursor
e476
        eor #$80	; toggle cursor
        sta ($c4),y
e474
        lda $e810
        and #$f0
        sta $e810	; clear keyboard row selector output

        ; keyboard read 
	jsr $e027

	; return from interrupt
        jmp $e600
        .)
#endif

	.)

