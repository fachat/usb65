/*
    (C) 2011-2013 Andre Fachat

    This file is part of the 6502 USB Host Driver.

    The 6502 USB Host Driver is free software: you can redistribute it and/or modify
    it under the terms of the Lesser GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    The 6502 USB Host Driver is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    Lesser GNU General Public License for more details.

    You should have received a copy of the Lesser GNU General Public License
    along with the 6502 USB Host Driver. If not, see <http://www.gnu.org/licenses/>.
*/

/*
 * this code installs the USB driver at the end of the PET 32k RAM
 * and patches it into the interrupt routine, so that it can
 * run in background and be used as keyboard driver
 *
 * (C) 2011 A. Fachat
 */

#undef	DEBUG
#undef	DEBUG_POLL
#undef	DEBUG_HW

	.(

#ifdef LOADER

#include "hostmsg.i65"

; pointer to size of memory for PET BASIC 4
MEMSIZ		=$34
; pointer to begin of string area
FRETOP		=$30


	.text

	.word $0401
	.word eol
	.word 10
	.byt $9e, "1040"
	.byt $3a, $9c
	.byt 0
eol	.word 0
	.dsb 1040-*, $aa

start	.(

len	=8*1024

	.zero
ptr1	.word 0
ptr2	.word 0
	.text

&newpos	=$8000-len

	lda #<tomove
	sta ptr1
	lda #>tomove
	sta ptr1+1
	lda #<newpos
	sta ptr2
	lda #>newpos
	sta ptr2+1

	ldx #>(len+255)		; number of pages
	ldy #0
loop	lda (ptr1),y
	sta (ptr2),y
	iny
	bne loop
	inc ptr1+1
	inc ptr2+1
	dex
	bne loop

	;done with move, protect the memory by updating BASIC top
	; CLR is done after the SYS from the basic prg
	lda #<newpos
	sta MEMSIZ
	sta FRETOP
	lda #>newpos
	sta MEMSIZ+1
	sta FRETOP+1

	jsr newpos+15		; init_scr		; init virtual screen

	;lda #14
	;jsr printc		; lower/upper case mode

	ldy #MSG_COPYRIGHT
	jsr newpos+3

#ifdef PET
	lda #3
	sta $e809
#endif
	jsr newpos+18		; startint - to keep MOTOR save
	
	jsr newpos		; usb_init
	bcc hwfound
	tay			; error number
	jsr newpos+3		; print

	jsr newpos+6		; scr_flush

	jsr newpos+21		; endint
	rts
hwfound
	jsr newpos+9		;prversion

	jmp newpos+12		; start2

tomove
	; assemble code for new position
	.)

#endif		; LOADER

#ifdef DRIVER

#define PET
#ifdef PET
#define	MAX3421_HOST
#undef	SPI65_SPI
#define	CBMSPI_SPI
#else
#define	SL811_HOST	$ec98
#endif

#include "hostmsg.i65"

	.zero

; all pointers are used only by TAPE code
; print routine pointer
ZPRINTPTR	=$b1
; device driver pointer
ZUDEVPTR1	=$b7; 	$ce	; $b7 (conflict with editor ROM project - escape codes)
; general pointer within USB code
ptr		=$b9
; debug code pointer (to save inline string address)
dbg_ptr		=$bb

	.text

#ifdef DEBUG
DBGBASE		=$8028		; screen plus one line, so PETUSBKBD can use first line
SCRBASE		=$8028		; screen plus one line, so PETUSBKBD can use first line
#else
SCRBASE		=$8000
#endif

IRQV	=$0090

	jmp usb_init		; +0
	jmp print		; +3
	jmp scr_flush		; +6
	jmp prversion		; +9
	jmp start2		; +12
	jmp init_scr		; +15
	jmp startint		; +18
	jmp endint		; +21

/* current screen column for debug, so we can enter cr when appropriate */

#include "hostmsg.a65"
#include "debug.a65"
#include "usb.a65"
	.(
	.data
irqv	.word 0
lock	.byt 0
	.text


&start2	
	lda #0
	sta lock
	rts

&startint 
	jsr scr_flush

	; patch the poll routine into the interrupt routine
	; a specific memory location is used as a lock 
	; Once in the routine, interrupts are allowed again, but
	; the usb driver is not entered again until the poll is done
	php
	sei
	lda #<-1	; first lock, so that only MOTOR line is held, but no USB stuff
	sta lock

	lda IRQV
	sta irqv
	lda IRQV+1
	sta irqv+1

	lda #<newirq
	sta IRQV
	lda #>newirq
	sta IRQV+1
	plp		; implicit cli
	rts

&endint
	php
	sei
	lda irqv
	sta IRQV
	lda irqv+1
	sta IRQV+1
	plp
	rts

	;-------------------------------
	; new interrupt routine
newirq
	; The first part is such a BAD HACK(tm)
	;
	; After IEC load, the kernal calls F92B, assumingly to check
	; the RUN/STOP key a last time. But starting from F92E it checks
	; whether the interrupt vector is set to page $E4xx - and if not,
	; just loops! I did not find another way around this than the following
	; BAD HACK:
	; in the interrupt routine, we check whether we have interrupted the
	; code in just this place, and then forward the RTI address on the
	; stack such that the check is ignored.
	tsx
	lda $0106,x
	cmp #$f9
	bne nohack	;no hack needed
	lda $0105,x
	cmp #$2b
	beq hack
	cmp #$2e
	beq hack
	cmp #$30
	bne nohack
hack	lda #$34
	sta $0105,x
nohack
	;-------------------------------
	; debug output
#ifdef DEBUG
	inc DBGBASE+0
	lda $96		; kernel status
	sta DBGBASE+1
	lda lock
	sta DBGBASE+2
	lda $e840
	sta DBGBASE+5
#endif
	;-------------------------------
	; protect IEEE488 
	lda $e840
	and #$c1	; NRFDin, NDACin, DAVin
	cmp #$c1	; active? then do not poll, as we might interfere with IEEE488 timing
	bne nopoll
	
	;-------------------------------
	; poll the USB bus

	; no race condition, we can safely assume to not be interrupted (on single-cpu)
	lda lock
	bpl poll
	; back into original irq routine
nopoll	;jmp (irqv)
	jmp newirq2
poll
#ifdef DEBUG
	tsx
	lda $0105,x
	sta DBGBASE+3
	lda $0106,x
	sta DBGBASE+4
#endif

	dec lock	; lock so we don't get into poll again for now; results in $ff
	cli		; allow interrupts again (we need them in the driver)
			; this actually directly goes back into the IRQ routine, as we haven't
			; cleared the IRQ yet. Only now the lock above protects the routine,
			; and the normal irq is executed

	jsr usb_polldev
	bcs error

retirq	
	; flush last message to screen
	jsr scr_flush

	sei

	; return into original program (as if from interrupt)
	pla
	tay
	pla
	tax
	pla
	; free lock
	inc lock	; $ff -> $00
	rti

error
	ldy #ERR_DEVICE
	jsr printx
	jmp retirq
	.)

waitkey .(
	rts
;	ldy #MSG_WAIT_KEY
;	jsr print
;l	jsr $f335
;	bne l
;	rts
	.)

prversion .(
	tax
	bne v15
	ldy #MSG_V12
	.byt $2c
v15	ldy #MSG_V15
	jmp print
	.)

VCOUNT=$99

; pause a given number of vertical screen retraces (1/50th seconds)
; in AC has number of frames (retraces)
pause   .(
	tax
	inx           ; full retraces, so one more border between traces
p0	lda VCOUNT
p1	cmp VCOUNT
	beq p1
	dex
	bne p0
	rts
	.)

	;----------------------------------------------------------------
	; those callbacks are being called from the driver, i.e. 
	; actually from within somewhere in the code. We need
	; to protect the output

; callback from the keyboard code
; ac contains key from keyboard (in PETSCII)
usb_kbd_rx_key_cb .(
	jsr printc2
	rts
	.)
	

; callback from the mouse code
; ac contains buttons
; x/y contain x resp. y displacement
&usb_mouse_rx_cb .(

	and #$07
	beq nom
	cmp #1		; mouse button 1
	bne nocr

	lda #13		; output CR for mouse button 1
	jsr printc2
	jmp nom

nocr	pha 
	lda #"M"
	jsr printc2
	pla
	ora #"0"
	jsr printc2
nom	
	txa
	beq nox
	rol		; bit 7 into carry
	txa		; restore orig value
	ror		; carry into bit, sign-extended shift right
	tax
	bmi left
right	lda #$1d
	jsr printc2
	;dex		; do not loop, as this makes the mouse way too fast
	;bne right
	;beq nox
	bne nox		; printc has php/plp pair
left	lda #$9d
	jsr printc2
	;inx
	;bne left
nox
	tya
	beq noy
	rol
	tya
	ror
	tay
	bmi up
down	lda #$11
	jsr printc2
	;dey
	;bne down
	;beq noy
	bne noy
up	lda #$91
	jsr printc2
	;iny
	;bne up
noy
	rts
	.)

	;----------------------------------------------------------------
	; virtual screen to print to from driver
	; print output is collected, and - if there is something - 
	; recalled at the end of the poll, waiting for a key
	; to clear the buffer
	.(
tmpx	.byt 0
tmpy	.byt 0
tmpc	.byt 0

line	.byt 0	; current line
col	.byt 0	; current col
&SCREENCOL=col

colp	.byt 0, 40, 80, 120, 160, 200

LINES	=6	; 6 lines
COLS	=40	; with 40 cols each (max below 256 bytes)
SCRLEN	=LINES*COLS

SCREEN	=SCRBASE

&init_scr .(
	jsr clrscr
	rts
	.)

&printc2 .(
	; write a char into the key buffer (if not filled already)
	php
	sei
	stx tmpx
	ldx $9e
	cpx $e3
	bcs full
	sta $026f,x
	inc $9e
full 	ldx tmpx
	plp
	rts
	.)

&printc	.(
	stx tmpx
	sty tmpy
	sta tmpc
	cmp #$20
	bcs printable
	cmp #13
	beq nextl
printable
	ldy line
	lda colp,y
	clc
	adc col
	tay
	lda tmpc
	and #$ff-$40	; to screen code
	ora #$80	; invers
	sta screenbuf,y
nextc	inc col
	lda col
	cmp #COLS
	bcc endprint
nextl	lda #0
	sta col
	inc line
	lda line
	cmp #LINES
	bcc endprint
	jsr show
endprint
	ldx tmpx
	ldy tmpy
	lda tmpc
	rts
	.)

clrscr 	.(
	ldy #0
	sty line
	sty col
	lda #$a0	; space, inverted
	ldy #SCRLEN
l	sta screenbuf-1,y
	dey
	bne l
	rts
	.)

&scr_flush .(
	lda col
	ora line
	beq noshow
	jsr show
noshow	rts
	.)

	; this routine swaps the screenbuf with the start of the actual screen
	; then waits for a keypress
show	.(
	jsr swap
	jsr waitkeypress
	jsr swap
	jsr clrscr
	rts
	.)

waitkeypress .(
	lda $9e
	beq waitkeypress
	sei
	jmp $e0a7
	.)

swap	.(
	ldy #SCRLEN
sl	ldx screenbuf-1,y
	lda SCREEN-1,y
	sta screenbuf-1,y
	txa
	sta SCREEN-1,y
	dey
	bne sl
	rts
	.)

screenbuf .dsb SCRLEN

	.)

newirq2  .(
;        lda irqmode
;        bne noloop
;        jsr DLOOP
noloop  ;jmp (irqsave)

        ; the PET sets the MTR line on the tape, no matter what,
        ; esp. with the SENSE line.
        ; So we need to emulate the original IRQ routine up to the 
        ; point behind that MTR code

        jsr $f768       ; update jiffy
        ; cursor handling
        lda $a7
        bne e474        ; $d0 $18
        dec $a8
        bne e474        ; $d0 $14
        lda #$14
        sta $a8
        ldy $c6
        lsr $aa
        lda ($c4),y
        bcs e476        ; $b0 $04
        inc $aa
        sta $a9
e476
        eor #$80
        sta ($c4),y
e474
        ; ???
        ldx #$ff
        stx $a6
        inx
        stx $98
        ldx #$50
;e47d
        lda $e810
        and #$f0
        sta $e810
;e485
        ; MTR handling removed
;e4b5
        ; keyboard read
        jmp $e4b5


        .)
#endif

	.)

