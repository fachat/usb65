/*
    (C) 2011 Andre Fachat

    This file is part of the 6502 USB Device Driver.

    The 6502 USB Device Driver is free software: you can redistribute it and/or modify
    it under the terms of the Lesser GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    The 6502 USB Device Driver is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    Lesser GNU General Public License for more details.

    You should have received a copy of the Lesser GNU General Public License
    along with the 6502 USB Device Driver. If not, see <http://www.gnu.org/licenses/>.
*/

/*
 * this code installs the USB driver at the end of the PET 32k RAM
 * and patches it into the interrupt routine, so that it can
 * run in background and be used as keyboard driver
 *
 * (C) 2011-2013 A. Fachat
 */

//#undef	SL811_DEV
//#define	MAX3420_DEV

#define	DEBUG

#ifdef MAX3420_DEV
#echo EP 3
#define	MAX_EP0_TXLEN	64
#define	ENDPOINT_NO	3
#else
// SL811HS
#define	MAX_EP0_TXLEN	8
#define	ENDPOINT_NO	1
#endif

	.(

	.bss
bssstart=*

	.text
hdrstart
	.word $0401
	.word eol
	.word 10
	.byt $9e, "1040"
	.byt $3a, $9c
	.byt 0
eol	.word 0
	.dsb hdrstart+17-* , $aa


#ifdef PET
#define	SL811_HOST	$ac98
#define	SL811_DEVICE	$ac90
#else
#define	SL811_HOST	$ec98
#define	SL811_DEVICE	$ec90
#endif


	.zero
zero	=*
zerolen	=15
; all pointers are used only by TAPE code
; print routine pointer
ZPRINTPTR       .word 0		; =$16	; $b1
; device driver pointer
ZUDEVPTR1       .word 0		; =$18	; b6
; general pointer within USB code
ptr             .word 0		; =$1a	; b8
; debug code pointer (to save inline string address)
dbg_ptr         .word 0		; =$1c	; bb
; print pointer
pr_ptr          .word 0		; =$1e	; bb

	.text

#include "devmsg.i65"
#include "debug.i65"
#include "usb.i65"

start	.(
	lda #$10
	sta $effb

	ldy #0
	tya
s1	sta bssstart,y
	sta bssstart+$0100,y
	sta bssstart+$0200,y
	sta bssstart+$0300,y
	iny
	bne s1

	ldy #zerolen
save	lda zero,y
	sta buf,y
	dey
	bpl save

	jsr prinit

	ldy #MSG_COPYRIGHT
	jsr print

	jsr prflush

#ifdef PET
	lda #3
	sta $e809		; init the PET-CSA bridge
#endif

	lda #USBD_SLOW_SPEED	; slow speed
	jsr usbd_init
	bcc hwfound
	DMSG("NOTFOUND")
	tay			; error number
	jsr print
	jmp end
hwfound
	DMSG("FOUND")
	jsr start2
end
	ldy #zerolen
restore	lda buf,y
	sta zero,y
	dey
	bpl restore
	rts

	.bss

buf	.dsb 16,0

	.text
	.)

/* current screen column for debug, so we can enter cr when appropriate */
#define SCREENCOL       $c6

#include "devmsg.a65"
#include "debug.a65"
#include "usbdev.a65"
#include "kbddev.a65"

	.(
	.bss

irqv	.word 0
lock	.byt 0

	.data

IRQV	=$0090

; for description for example see 
; http://www.beyondlogic.org/usbnutshell/usb5.shtml#DeviceDescriptors
; the device descriptor
devdesc .byt $12	; length
	.byt 1		; type = device descriptor 	
	.word $0110 	; USB version
	.byt 0		; device class (0 = interface defines it)
	.byt 0		; subclass code
	.byt 0		; protocol code
	.byt MAX_EP0_TXLEN	; max packet size for endpoint zero
	.word 0		; vendor id
	.word 0		; product id
	.word 0		; device id number
	.byt 0		; manufacturer string descriptor index
	.byt 0		; product string descriptor index
	.byt 0		; serial number string descriptor index
	.byt 1		; number of possible configurations

cfgdesc	; configuration descriptor (includes interface and endpoint descs)
	.byt 9		; length
	.byt 2		; config descriptor
	.word cfglen	; total length of config
	.byt 1		; number of interfaces
	.byt 1		; number of this configuration (identifier)
	.byt 0		; configuration name string descriptor index
	.byt $c0	; bmAttributes - self-powered
	.byt 0		; max power consumption
	; here comes the interface desc	
	.byt 9		; length
	.byt 4		; interface desc
	.byt 0		; number of interface
	.byt 0		; bAlternateSetting - value used to select alternative setting
	.byt 1		; number of endpoints (besides zero)
	.byt 3		; class - 3=HID
	.byt 1		; subclass - 1=boot interface
	.byt 1		; protocol - 1=keyboard
	.byt 0		; interface name string descriptor index
	; the HID descriptor
	.byt 9		; length
	.byt 33		; HID descriptor type
	.word $0110	; HID device specification version (in BCD)
	.byt 0		; country code (0=not supported)
	.byt 1		; number of further descriptors (at least the report desc.)
	.byt $22	; Report class descriptor (see HID 1.11 specs, page 49, section 7.1 Standard requests)
	.word repdesclen; length of report descriptor 
	; and the endpoint interface
	.byt 7		; length
	.byt 5		; endpoint descriptor
	.byt $80+ENDPOINT_NO	; device to host, endpoint number 1/3
	.byt 3		; interrupt type endpoint
	.word 8		; max number of bytes transferrable for this endpoint
	.byt $18	; interval for endpoint polling in frame counts
cfglen	=*-cfgdesc

; Note: this descriptor should go into kbddev.a65, but
; its length is part of the interface descriptor ...
; TODO: Need a way to "build" the config from device parts dynamically
&repdesc ; report descriptor for HID device
	; see HID 1.11 spec appendix E.6
	; warning, here be dragons...
	.byt 5, 1	; Usage page: generic desktop
	.byt 9, 6	; Usage: keyboard
	.byt $a1, 1	; collection: application

	.byt 5, 7	; usage page: key codes
	.byt $19, $e0	; usage minimum: 224
	.byt $29, $e7	; usage maximum: 231
	.byt $15, 0	; logical minimum: 0
	.byt $25, 1	; logical maximum: 1

	.byt $75, 1	; report size: 1
	.byt $95, 8	; report count: 8
	.byt $81, 2	; input: data/variable/absolute - modifier byte

	.byt $95, 1	; report count: 1
	.byt $75, 8	; report size: 8
	.byt $81, 1	; input: constant 1 - reserved byte

	.byt $95, 6	; report count: 6
	.byt $75, 8	; report size: 8
	.byt $15, 0	; logical minimum: 0
	.byt $25, $65	; logical maximum: 101
	.byt $19, 0	; usage minimum: 0
	.byt $29, $65	; usage maximum: 101
	.byt $81, 0	; input: data/array - key array, 6 byte
	.byt $c0	; end collection
&repdesclen=*-repdesc
	
	.text

&start2	
	DDEBUG(nop)

	jsr prflush

	; setup the necessary structures

	ldx #0		; control channel
	lda #MAX_EP0_TXLEN	; 8 byte max tx len
	jsr usbd_set_maxlen	
	ldx #ENDPOINT_NO	; interrupt endpoint
	lda #8		; 8 byte max tx len
	jsr usbd_set_maxlen
	
	; device descriptor
	lda #<devdesc
	ldy #>devdesc
	jsr usbd_set_device_desc
	
	; device configuration
	lda #<cfgdesc
	ldy #>cfgdesc
	ldx cfglen
	jsr usbd_set_conf_desc

	DDEBUG(nop)	; place for a trace break

	; patch the poll routine into the interrupt routine
	; a specific memory location is used as a lock 
	; Once in the routine, interrupts are allowed again, but
	; the usb driver is not entered again until the poll is done
	php
	sei
	lda #0
	sta lock

	lda IRQV
	sta irqv
	lda IRQV+1
	sta irqv+1

	lda #<newirq
	sta IRQV
	lda #>newirq
	sta IRQV+1
	plp		; implicit cli

	; init (and register) keyboard
	lda #0		; interface number
	ldy #ENDPOINT_NO		; endpoint number
	jsr kbddev_register

	jsr usbd_start	; actually start the work

loop	jsr prflush
#ifdef DEBUG
	inc $8027
#endif
	jsr $ffe4
	beq loop	; no key

	jsr kbddev_send	; send key (PETSCII)

	jmp loop

newirq
	; This is such a BAD HACK(tm)
	;
	; After IEC load, the kernal calls F92B, assumingly to check
	; the RUN/STOP key a last time. But starting from F92E it checks
	; whether the interrupt vector is set to page $E4xx - and if not,
	; just loops! I did not find another way around this than the following
	; BAD HACK:
	; in the interrupt routine, we check whether we have interrupted the
	; code in just this place, and then forward the RTI address on the
	; stack such that the check is ignored.
	tsx
	lda $0106,x
	cmp #$f9
	bne nohack	;no hack needed
	lda $0105,x
	cmp #$2b
	beq hack
	cmp #$2e
	beq hack
	cmp #$30
	bne nohack
hack	lda #$34
	sta $0105,x
nohack
	; debug output
#ifdef DEBUG
	inc $8000
	lda $96		; kernel status
	sta $8001
	lda lock
	sta $8002
	lda $e840
	sta $8005
#endif
	lda $e840
	and #$c1	; NRFDin, NDACin, DAVin
	cmp #$c1	; active? then do not poll, as we might interfere with IEEE488 timing
	;bne nopoll
	
	; no race condition, we can safely assume to not be interrupted (on single-cpu)
	lda lock
	bpl poll
	; back into original irq routine
nopoll	jmp (irqv)
poll
	dec lock	; lock so we don't get into poll again for now; results in $ff
	jsr usbd_int
retirq	
	lda #0
	sta lock	; unlock
	jmp nopoll
error
	ldy #ERR_DEVICE
	jsr printx
	jmp retirq
	.)

waitkey .(
	rts
;	ldy #MSG_WAIT_KEY
;	jsr print
;l	jsr $f335
;	bne l
;	rts
	.)


;----------------------------------------------------------
; this code implements a simple buffered screen writer
; so interrupt routine can write to this ring-buffer and
; app empties it and displays the data. 
; note: overflow overwrites older log data

	.(
#ifdef DEBUG
PRBLEN	=4096
#else
PRBLEN	=256
#endif

#if 0
&prinit .(
	lda #0
	sta prrp
	sta prwp
	rts
	.)

&printc .(
	stx tmpx
	ldx prwp
	sta prbuf,x
	inc prwp
	ldx tmpx
	rts
	.)

&prflush .(
	ldx prrp
	cpx prwp
	beq end
	lda prbuf,x
	jsr $ffd2
	inc prrp
	jmp prflush
end	rts
	.)

#else
&prinit .(
	lda #<prbuf
	sta prrp
	sta prwp
	sta pr_ptr
	lda #>prbuf
	sta prrp+1
	sta prwp+1
	sta pr_ptr+1

	ldx #PRBLEN>>8
	lda #$ff
	ldy #0
clx	sta (pr_ptr),y
	iny
	bne clx
	inc pr_ptr+1
	dex
	bne clx
	rts
	.)

; write into log buffer
&printc	.(
	php
	sei
	stx tmpx
	sty tmpy
	tax
	lda prwp
	sta pr_ptr
	lda prwp+1
	sta pr_ptr+1
	txa
	ldy #0
	sta (pr_ptr),y
	jsr incptr
	sta prwp
	sty prwp+1
	txa
	ldx tmpx
	ldy tmpy
	plp
	rts
	.)

incptr	.(
	inc pr_ptr
	bne l1
	inc pr_ptr+1
l1	lda pr_ptr
	ldy pr_ptr+1
	cpy #>prbuf+PRBLEN	; high byte end
	bcc l2			; ptr less than end, then return
	bne l3			; ptr greaterm then new
	cmp #<prbuf+PRBLEN
	bcc l2
l3 	lda #<prbuf		; ptr equals (or more) than end, then roll over
	ldy #>prbuf
l2	rts
.)

; flush out the log to screen
&prflush .(
	php
	sei
 	lda prrp
	ldy prrp+1
	cmp prwp
	bne l1
	cpy prwp+1
	beq end
l1	sta pr_ptr
	sty pr_ptr+1
	ldy #0
	lda (pr_ptr),y
	tax
	jsr incptr
	sta prrp
	sty prrp+1
	txa
	plp
	jsr $ffd2
	jmp prflush
end	plp
	rts
	.)
#endif

	.bss

prwp	.word 0		; write pointer
prrp	.word 0		; read pointer

tmpx	.byt 0
tmpy	.byt 0

;prbuf	.dsb PRBLEN, 0	; print ring buffer
prbuf	=$b000 		; print ring buffer

	.text

	.)

	.)
