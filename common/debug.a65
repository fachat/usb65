/*
    (C) 2011 Andre Fachat

    This file is part of the 6502 USB Device Driver.

    The 6502 USB Device Driver is free software: you can redistribute it and/or modify
    it under the terms of the Lesser GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    The 6502 USB Device Driver is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    Lesser GNU General Public License for more details.

    You should have received a copy of the Lesser GNU General Public License
    along with the 6502 USB Device Driver. If not, see <http://www.gnu.org/licenses/>.
*/
/*
 * debug code
 */

#include "debug.i65"

#ifdef DEBUG

	.(

	.bss

tmp	.byt 0

	.text

&dbg_stack .(
	php
	pha
	tya
	pha
	txa
	pha

	jsr prc

	lda #<stack_msg
	ldy #>stack_msg
	jsr printv

	tsx
	txa
	clc
	adc #6
	jsr hexout
	lda #":"
	jsr log_printc

	ldy #8
l	lda #" "
	jsr log_printc
	lda $0107,x
	jsr hexout
	inx
	dey 
	bne l

	lda #13
	jsr log_printc

	pla
	tax
	pla
	tay
	pla
	plp
	rts
	.)

&dbg_msg .(
	php
	pha
	tya
	pha
	txa
	pha

	jsr prc

	lda #<msg_msg
	ldy #>msg_msg
	jsr printv

	jsr print_regs

	lda #<end_ent_msg
	ldy #>end_ent_msg
	jsr printv

	pla
	tax
	pla
	tay
	pla
	plp
	rts
	.)

&dbg_enter .(
	php
	pha
	tya
	pha
	txa
	pha

	jsr prc

	lda #<enter_msg
	ldy #>enter_msg
	jsr printv

	jsr print_regs

	lda #<end_ent_msg
	ldy #>end_ent_msg
	jsr printv

	pla
	tax
	pla
	tay
	pla
	plp
	rts
	.)

prc	.(
	;lda SCREENCOL
	;beq nocr
	lda #13
	jmp log_printc
;nocr	rts
	.)

&dbg_exit .(
	php
	pha
	tya
	pha
	txa
	pha

	jsr prc

	lda #<exit_msg
	ldy #>exit_msg
	jsr printv

	jsr print_regs

	lda #<end_ent_msg
	ldy #>end_ent_msg
	jsr printv

	pla
	tax
	pla
	tay
	pla
	plp
	rts
	.)

&dbg_exit0 .(
	rts
	.)

print_regs .(
	tsx
	inx	; account for the jsr to print_regs
	inx	
	lda $0105,x	; retaddr l
	clc
	adc #1
	sta dbg_ptr
	lda $0106,x	; retaddr h
	adc #0
	sta dbg_ptr+1
	ldy #0
l	lda (dbg_ptr),y
	beq end
	jsr log_printc
	iny
	bne l
end	tya
	clc
	adc dbg_ptr
	sta $0105,x	; move rts return address behind debug string
	lda dbg_ptr+1
	adc #0
	sta $0106,x

	lda #<reg_msg
	ldy #>reg_msg
	jsr printv

	lda $0103,x	; ac
	jsr hexout
	lda $0101,x	; xr
	jsr hexout
	lda $0102,x	; yr
	jsr hexout

	txa
	clc
	adc #6
	jsr hexout

	lda #" "
	jsr log_printc
	lda $0104,x	; sr
	sta tmp

	lda #"N"
	asl tmp
	bcs f_neg
	lda #"-"
f_neg	jsr log_printc

	lda #"V"
	asl tmp
	bcs f_ov
	lda #"-"
f_ov	jsr log_printc

	lda #"1"
	asl tmp
	bcs f_one
	lda #"-"
f_one	jsr log_printc

	lda #"B"
	asl tmp
	bcs f_brk
	lda #"-"
f_brk	jsr log_printc

	lda #"D"
	asl tmp
	bcs f_dec
	lda #"-"
f_dec	jsr log_printc

	lda #"I"
	asl tmp
	bcs f_int
	lda #"-"
f_int	jsr log_printc

	lda #"Z"
	asl tmp
	bcs f_zero
	lda #"-"
f_zero	jsr log_printc

	lda #"C"
	asl tmp
	bcs f_carry
	lda #"-"
f_carry	jsr log_printc
	rts
	.)

	.data
stack_msg
	.asc "S> ", 0
msg_msg
	.asc "M> ", 0
exit_msg
	.asc "EXIT ", 0
enter_msg
	.asc "ENTER ", 0
reg_msg 
	.asc "[AXYSP=", 0
end_ent_msg
	.asc "]",13,0

	.text

	.)

#endif

