/*
    (C) 2011 Andre Fachat

    This file is part of the 6502 USB Device Driver.

    The 6502 USB Device Driver is free software: you can redistribute it and/or modify
    it under the terms of the Lesser GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    The 6502 USB Device Driver is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    Lesser GNU General Public License for more details.

    You should have received a copy of the Lesser GNU General Public License
    along with the 6502 USB Device Driver. If not, see <http://www.gnu.org/licenses/>.
*/

/*
 * defines the USB controller interfaces
 */

#ifndef USB_I65
#define USB_I65

; ---------------------------------------------------------------------------------------
; usbdev_init parameter

#define	USBD_SLOW_SPEED	0
#define	USBD_FULL_SPEED	1

; ---------------------------------------------------------------------------------------
; USB setup packet

#define	USB_SETUP_TYPE	0
#define	USB_SETUP_REQ	1
#define	USB_SETUP_VALUE	2
#define	USB_SETUP_INDEX	4
#define	USB_SETUP_LEN	6

#define	USB_SETUP_SIZE	8		/* size of a setup request */

; ---------------------------------------------------------------------------------------
; USB host control structure
; interface to the various usb_* functions

#define	HOST_CTRL_FNADDR	0
#define	HOST_CTRL_ENDPOINT	1	/* endpoint number; must be FNADDR+1 */
#define	HOST_CTRL_SPEED		2	/* ENDPOINT+1, speed of target device, to determine if to send preamble */
#define	HOST_CTRL_FLAGS		3	/* SPEED+1, flags, e.g. to ignore NAK */
#define	HOST_CTRL_MAXPKLEN	4	/* FLAGS+1, maximum packet length for endpoint (from EP desc), 2 byte */
#define	HOST_CTRL_BUFLEN	6	/* MAXPKLEN+2, number of bytes to transfer; 2 byte  */
#define	HOST_CTRL_BUFADDR	8	/* buffer addres to store data to */
#define	HOST_CTRL_SETUP		10	/* 8 byte USB control packet */

#define HOST_FLAG_IGNORE_NAK    $80     /* ignore NAK when reading data; must be bit 7 (bmi test) */
#define HOST_FLAG_DATA1         $40     /* next packet is DATA1, not DATA0 */

; ---------------------------------------------------------------------------------------
; input value to the poll routine when carry is set

#define	HOST_POLL_DETACHED	1	/* the device has been detached from an upstream hub */

; ---------------------------------------------------------------------------------------
; return value from usb_cb_detected on success (CLC)

#define	HOST_REGISTER_OK	0	/* control slot is not used, can be released */
#define	HOST_REGISTER_CTRL_USED	$80	/* do not close the control slot, as device needs it */

; ---------------------------------------------------------------------------------------
; poll register struct
; used to register an endpoint poll callback

#define	HOST_POLL_ENDPOINT	0	/* endpoint number, so you can register multiple callbacks per device */
#define	HOST_POLL_DATA		1	/* transparent data for poll callback */
#define	HOST_POLL_MAXPKLEN	2	/* 2 byte, maximum packet length from EP descriptor */
#define	HOST_POLL_CALLBACK	4	/* 2 byte, address of poll callback, all-zero ignored callback */

; ---------------------------------------------------------------------------------------
; USB standard values

; PID Values
#define PID_SOF         $50     /* SOF PID */
#define PID_IN          $90     /* Input (function to host) PACKET ID */
#define PID_SETUP       $D0     /* SET ADDRESS REQ */
#define PID_OUT         $10     /* Output (host to function) PACKET ID */

/* descriptor types */
#define	DESC_TYPE_CLASS		$20	/* offset for class descriptors */

#define	DESC_TYPE_DEVICE	1
#define	DESC_TYPE_CONFIG	2
#define	DESC_TYPE_STRING	3
#define	DESC_TYPE_INTERFACE	4
#define	DESC_TYPE_ENDPOINT	5

#define	DESC_TYPE_HUB_CL	9+DESC_TYPE_CLASS

/* indexes for device descriptor */
#define DESC_DEV_LEN            0
#define DESC_DEV_TYPE           1
#define DESC_DEV_USBSPEC        2       /* 2 byte BCD */
#define DESC_DEV_CLASS          4
#define DESC_DEV_SUBCLASS       5
#define DESC_DEV_PROTO          6
#define DESC_DEV_MAXREQSIZE     7
#define DESC_DEV_VENDOR         8       /* 2 byte */
#define DESC_DEV_PRODUCT        10      /* 2 byte */
#define DESC_DEV_DEVICERELEASE  12      /* 2 byte BCD */
#define DESC_DEV_STRIDX_MANU    14      /* manufacturer string descriptor index */
#define DESC_DEV_STRIDX_PROD    15      /* product string descriptor index */
#define DESC_DEV_STRIDX_SERIAL  16      /* serial no string descriptor index */
#define DESC_DEV_NUMCONF        17

#define	DESC_DEV_SIZE		18	/* size of descriptor */

/* indexes for string descriptor */
#define DESC_STR_LEN            0
#define DESC_STR_TYPE           1
#define DESC_STR_DATA           2

/* indexes for configuration descriptor */
#define DESC_CFG_LEN            0
#define DESC_CFG_TYPE           1
#define DESC_CFG_TOTAL_BYTES    2       /* two bytes lo/hi of full configuration */
#define DESC_CFG_NUM_IF         4       /* number of interface */
#define DESC_CFG_THIS_CONF      5       /* number of this configuration (for set config) */
#define DESC_CFG_NAME           6       /* index of string descriptor for name of this config */
#define DESC_CFG_ATTRIBS        7       /* attributes */
#define DESC_CFG_POWER_REQ      8       /* power requirements in 2mA units */

/* indexes for interface descriptor */
#define DESC_IFC_LEN            0
#define DESC_IFC_TYPE           1
#define	DESC_IFC_NUM		2	/* number of this interface */
#define	DESC_IFC_ALT		3	/* value used to select alteranate setting */
#define	DESC_IFC_NUM_EP		4	/* number of end points */
#define	DESC_IFC_CLASS		5	/* class code */
#define	DESC_IFC_SUBCLASS	6	/* subclass code */
#define	DESC_IFC_PROTO		7	/* protocol code */
#define	DESC_IFC_STRIDX_NAME	8	/* string index of name of this interface */

/* indexes for endpoint descriptor */
#define	DESC_EP_LEN		0
#define	DESC_EP_TYPE		1
#define	DESC_EP_ADDR		2	/* endpoint address (0-3), bit 7=out(0)/in(1), rest is zero */
#define	DESC_EP_ATTR		3	/* endpoint attributes (3 for interrupt eps) */
#define	DESC_EP_MAX_PACKET_SIZE	4	/* maximum packet size, 2 byte */
#define	DESC_EP_INTERVAL	5	/* polling interval for interrupt endpoints */

#define	CLASS_HUB		9
#define	CLASS_HID		3
#define	SUBCLASS_HID_KMT	1
#define	PROT_HID_KMT_KEYBOARD	1
#define	PROT_HID_KMT_MOUSE	2

/*
 * Standard requests, for the bRequest field of a SETUP packet.
 *
 * These are qualified by the bRequestType field, so that for example
 * TYPE_CLASS or TYPE_VENDOR specific feature flags could be retrieved
 * by a GET_STATUS request.
 */
#define USB_REQ_GET_STATUS              $00
#define USB_REQ_CLEAR_FEATURE           $01
#define USB_REQ_SET_FEATURE             $03
#define USB_REQ_SET_ADDRESS             $05
#define USB_REQ_GET_DESCRIPTOR          $06
#define USB_REQ_SET_DESCRIPTOR          $07
#define USB_REQ_GET_CONFIGURATION       $08
#define USB_REQ_SET_CONFIGURATION       $09
#define USB_REQ_GET_INTERFACE           $0A
#define USB_REQ_SET_INTERFACE           $0B
#define USB_REQ_SYNCH_FRAME             $0C

#define USB_REQ_SET_ENCRYPTION          $0D    /* Wireless USB */
#define USB_REQ_GET_ENCRYPTION          $0E
#define USB_REQ_RPIPE_ABORT             $0E
#define USB_REQ_SET_HANDSHAKE           $0F
#define USB_REQ_RPIPE_RESET             $0F
#define USB_REQ_GET_HANDSHAKE           $10
#define USB_REQ_SET_CONNECTION          $11
#define USB_REQ_SET_SECURITY_DATA       $12
#define USB_REQ_GET_SECURITY_DATA       $13
#define USB_REQ_SET_WUSB_DATA           $14
#define USB_REQ_LOOPBACK_DATA_WRITE     $15
#define USB_REQ_LOOPBACK_DATA_READ      $16
#define USB_REQ_SET_INTERFACE_DS        $17

/*
 * Setup Data Constants
 *
 * source:
 * - https://github.com/felis/USB_Host_Shield_2.0/blob/master/usb_ch9.h
 */

#define USB_SETUP_HOST_TO_DEVICE                0x00    // Device Request bmRequestType transfer direction - host to device transfer
#define USB_SETUP_DEVICE_TO_HOST                0x80    // Device Request bmRequestType transfer direction - device to host transfer
#define USB_SETUP_TYPE_STANDARD                 0x00    // Device Request bmRequestType type - standard
#define USB_SETUP_TYPE_CLASS                    0x20    // Device Request bmRequestType type - class
#define USB_SETUP_TYPE_VENDOR                   0x40    // Device Request bmRequestType type - vendor
#define USB_SETUP_RECIPIENT_DEVICE              0x00    // Device Request bmRequestType recipient - device
#define USB_SETUP_RECIPIENT_INTERFACE           0x01    // Device Request bmRequestType recipient - interface
#define USB_SETUP_RECIPIENT_ENDPOINT            0x02    // Device Request bmRequestType recipient - endpoint
#define USB_SETUP_RECIPIENT_OTHER               0x03    // Device Request bmRequestType recipient - other

/* 
 * HID BOOT PROTOCOL definitions
 *
 * source: 
 * - https://github.com/felis/USB_Host_Shield_2.0/blob/master/usbhid.h
 */


/* HID requests */
#define bmREQ_HID_OUT                           USB_SETUP_HOST_TO_DEVICE|USB_SETUP_TYPE_CLASS|USB_SETUP_RECIPIENT_INTERFACE
#define bmREQ_HID_IN                            USB_SETUP_DEVICE_TO_HOST|USB_SETUP_TYPE_CLASS|USB_SETUP_RECIPIENT_INTERFACE
#define bmREQ_HID_REPORT                        USB_SETUP_DEVICE_TO_HOST|USB_SETUP_TYPE_STANDARD|USB_SETUP_RECIPIENT_INTERFACE

/* HID constants. Not part of chapter 9 */
/* Class-Specific Requests */
#define HID_REQUEST_GET_REPORT                  0x01
#define HID_REQUEST_GET_IDLE                    0x02
#define HID_REQUEST_GET_PROTOCOL                0x03
#define HID_REQUEST_SET_REPORT                  0x09
#define HID_REQUEST_SET_IDLE                    0x0A
#define HID_REQUEST_SET_PROTOCOL                0x0B

/* Protocol Selection */
#define USB_HID_BOOT_PROTOCOL                   0x00
#define HID_RPT_PROTOCOL                        0x01


#endif

