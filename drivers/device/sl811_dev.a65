/*
    (C) 2011 Andre Fachat

    This file is part of the 6502 USB Device Driver.

    The 6502 USB Device Driver is free software: you can redistribute it and/or modify
    it under the terms of the Lesser GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    The 6502 USB Device Driver is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    Lesser GNU General Public License for more details.

    You should have received a copy of the Lesser GNU General Public License
    along with the 6502 USB Device Driver. If not, see <http://www.gnu.org/licenses/>.
*/

/*
 * SL811hs device interface
 *
 * (C) 2011 A. Fachat
 */

/*
 * General principles of operation
 *
 * The sl811 supports up to four endpoints, numbered 0 to 3
 * Endpoint 0 is of course the control endpoint. 
 * For each endpoint two sets of registers are supported
 * The code here normally uses only one set of registers.
 * Only on sending the last data packet, the second set is 
 * prepared to receive the ACK for the data, and while
 * the SL811 is waiting for that ACK, the first register set
 * is already prepared to receive the next setup packet.
 * This is required to keep the timing requirements.
 * 
 * interface description
 *
 * sl811d_init
 *      checks presence of hardware (SL811);
 *      return clc when ok, sec when not found
 *	In AC speed; 0=low, 1=full speed
 *      Out - returns the maximum number of 
 *	endpoints supported by driver/hardware in ac
 * sl811d_set_maxlen
 *	in xr=endpoint, ac=maximum transaction buffer length
 *	must be called before sl811d_start
 * sl811d_start
 *	when this method is called, the driver enables
 *	the interrupt generation, so that the interrupt
 *	routine must then call the follwing interrupt callback
 * sl811d_reset
 *	this is called when a USB reset is received
 *	(which is automatically detected by sl811d_int)
 * sl811d_int
 *	interrupt callback; calls into the driver from the
 *	actual interrupt routine; handles the sl811 interrupt
 *	that has been set up with sl811d_start
 *	calls back into the callbacks defined in the channel
 *	control blocks when a USB transaction has completed.
 *	Those callback routines then call into the
 *	following routines:
 *
 * 	sl811d_set_addr
 *		in ac=USB device address, called to set the device
 *		address after a set-address call from the host
 *	sl811d_send_ack
 *		in xr=endpt, a/y=callback address when ack is sent
 *	sl811d_send_stall
 *		in xr=endpt, a/y=callback address when stall is sent
 *	sl811d_recv_ack
 *		in xr=endpt, a/y=callback when ack is received
 *		Note in the current version this is called without
 *		actually waiting for the ACK, as the callback sets up
 *		the receive for the next setup and timing is tight
 * 	sl811d_set_rx
 *		Set an endpoint receive buffer, a/y is the channel control
 *		block, x is the endpoint number
 *		Note an endpoint can at any time be either rx or tx, not both
 * 	sl811d_set_tx
 *		Set an endpoint transmit buffer, a/y is the channel control
 *		block, x is the endpoint number
 *		Note an endpoint can at any time be either rx or tx, not both
 *
 * sl811d_is_active
 *	checks if an endpoint is still active
 *	in: x=endpoint
 *	out: CLC if not active, SEC if active
 */


	.(

#include "usbdev.i65"
#include "sl811_dev.i65"

;-----------------------------------------------------------
; data structures

#define	MAX_ENDPOINTS 	4	/* code limit is < 128 */
#define	MAX_BUFLEN 	$e0	

	.zero

ctrlptr .word 0

	.bss

speed	.byt 0		; bit 7 =1 -> low speed
currep	.byt 0		; current endpoint
cnt	.byt 0		; count
pkstat	.byt 0		; tmp pkstat
gstate 	.byt 0		; global state, bit7 set when active, controlled by RESET

txmax	.dsb MAX_ENDPOINTS, 0	; max transfer length per endpoint
txpos	.dsb MAX_ENDPOINTS, 0	; endpoint buffer position per endpoint, calculated at usbd_start
txlen	.dsb MAX_ENDPOINTS, 0	; endpoint buffer length, set per transaction
txtog	.dsb MAX_ENDPOINTS, 0	; endpoint toggle state
txflg	.dsb MAX_ENDPOINTS, 0	; endpoint flags: $80 = fixed length

endpst	.dsb MAX_ENDPOINTS, 0	; endpoints status. 0=not used
bufaddrl .dsb MAX_ENDPOINTS, 0	; buffer address (low, high)
bufaddrh .dsb MAX_ENDPOINTS, 0	
buflenl	.dsb MAX_ENDPOINTS, 0	; buffer length (low, high)
buflenh	.dsb MAX_ENDPOINTS, 0
cbackl 	.dsb MAX_ENDPOINTS, 0	; callback address (low, high)
cbackh 	.dsb MAX_ENDPOINTS, 0
cbacktd	.dsb MAX_ENDPOINTS, 0	; transient data for callback (given in y)

	.data

pow2	.byt 1, 2, 4, 8		; power of two for endpoint bits in IRQEN/INTSTAT
regoff	.byt 0, $10, $20, $30	; register offset for endpoints 0-3

	.text

;-----------------------------------------------------------
; initialization

; check; ac=speed; xr=device number
&sl811d_init .(
	DMSG("SL811D_INIT")
	; there is no version register in device mode
	; so no easy check if/which HW is available
	;  TODO hw present check

	tay
	beq lowspeed0
	dey
	beq highspeed0
	lda #ERR_SPEED
	sec
	rts
lowspeed0
	lda #$80
	.byt $2c
highspeed0
	lda #0
	sta speed	; put low speed flag into speed flag bit 7
	sta gstate	; global reset state - inactive

	lsr		; note: bit7 in speed variable gets shifted into CTRLREG2_DSWAP!
	STD_CTRL2	; device mode

 	lda #0		; disable for now (just in case it was enabled)
        STD_DEVCTL

       	lda #$00	; disable interrupts
	STREGD(SL811D_IRQEN)

	lda #0		; initial device address
	STREGD(SL811D_USBADDR)

	ldx #MAX_ENDPOINTS-1
l1	sta txmax,x
	sta txtog,x
	sta endpst,x
	dex
	bpl l1

	lda #0
	STREGD(SL811D_CURDSET)
	
	lda #8
	sta txmax	; endpoint 0 buffer length (needs to be 8 for setup packets)

	; setup all data sets to return NAK and to switch to 
 	; dataset B
	lda #EPCTL_NEXTDSET | EPCTL_TX | EPCTL_ENABLE	; note, no ARM -> NAK
	STREGD(EPA_CTRL+EP0_OFFSET)
	STREGD(EPA_CTRL+EP1_OFFSET)
	STREGD(EPA_CTRL+EP2_OFFSET)
	STREGD(EPA_CTRL+EP3_OFFSET)
	STREGD(EPB_CTRL+EP0_OFFSET)
	STREGD(EPB_CTRL+EP1_OFFSET)
	STREGD(EPB_CTRL+EP2_OFFSET)
	STREGD(EPB_CTRL+EP3_OFFSET)

	; setup transfer length for all to zero
	lda #0		; endpoint buffer length
	STREGD(EPA_LEN+EP0_OFFSET)
	STREGD(EPB_LEN+EP0_OFFSET)
	STREGD(EPA_LEN+EP1_OFFSET)
	STREGD(EPB_LEN+EP1_OFFSET)
	STREGD(EPA_LEN+EP2_OFFSET)
	STREGD(EPB_LEN+EP2_OFFSET)
	STREGD(EPA_LEN+EP3_OFFSET)
	STREGD(EPB_LEN+EP3_OFFSET)

	; setup transfer buffer address for EP0A (control in)
	lda #$40
	STREGD(EPA_ADDR + EP0_OFFSET)

	bit speed
	bmi lowspeed2
	lda #DEVCTL_ENABLE
	.byt $2c
lowspeed2
	lda #DEVCTL_ENABLE | DEVCTL_LSPD
	STD_DEVCTL

	jsr clearirq	; clear all remaining irqs

	lda #4		; max number of endpoints
	clc
err     rts
        .)

&sl811d_reset .(
	lda #0		; initial device address
	STREGD(SL811D_USBADDR)
	STREGD(SL811D_CURDSET)

	ldx #MAX_ENDPOINTS-1
l1	sta endpst,x
	dex
	bpl l1
	clc
	rts
	.)

;-----------------------------------------------------------
; start the operation

&sl811d_start .(
	ldx #0
	lda #$40	;  first usable buffer address
inip	sta txpos,x
	clc
	adc txmax,x
	bcs err_povf	; fills only up to $ff, last byte unused (needs zero check)
	inx
	cpx #MAX_ENDPOINTS
	bcc inip

	jsr clearirq
	; enable interrupts
	lda #$4f	; USB reset plus endpoints 0-3 done
	STREGD(SL811D_IRQEN)

	clc
	rts
err_povf
	lda #ERR_BUFFER_OVERFLOW
	sec
	rts	
	.)

; set the maximum endpoint transaction size
; x is endpoints number
; a is the max length of the endpoint transfer
; TODO fix for >256 byte
&sl811d_set_maxlen .(
	cpx #MAX_ENDPOINTS
	bcs end
	cmp #MAX_BUFLEN+1
	bcs end
	sta txmax,x
end	rts
	.)

&sl811d_set_addr .(
	STREGD(SL811D_USBADDR)
	clc
	rts
	.)

;-----------------------------------------------------------

; determine if the endpoint given is still active
&sl811d_is_active .(
	lda endpst,x		; bit 7 is set when active
	asl			; move into carry
	rts
	.)

;-----------------------------------------------------------
; interrupt routine

&sl811d_int .(
	ldx #SL811D_INTSTAT
	jsr loadregd
	pha
#ifdef DEBUG
	cmp #$20
	beq x
	sta $8025
x	inc $8024
	ldy gstate
	sty $8026
#endif
	bit gstate
	bmi resetstate
	; no reset yet, so check it
	and #INT_USBRES
	beq no_reset
	; found reset becoming active
#ifdef DEBUG
	inc $8023
#endif
	sec
	ror gstate		; set bit 7 = reset
	; USB reset
	jsr usbd_cb_reset	; reset callback

	ldx #SL811D_IRQEN
	jsr loadregd
	and #$ff-INT_USBRES
	ora #INT_SOFRX
	jsr storeregd		; disable reset irq, enable sofrx irq
	; clear irq bits
	lda #INT_USBRES | INT_SOFRX
	ldx #SL811D_INTSTAT
	jsr storeregd
no_sofrx
	pla			; if we have reset, we don't need to do anything more
	rts

resetstate			; here we know we're in reset state
	and #INT_SOFRX
	beq no_sofrx		; no SOF, then done
#ifdef DEBUG
	inc $8022
#endif
	clc
	ror gstate		; clear bit 7 = no reset, next reset will trigger callback

	ldx #SL811D_IRQEN
	jsr loadregd
	and #$ff-INT_SOFRX
	ora #INT_USBRES
	jsr storeregd		; enable reset irq, disable sofrx irq
	; clear irq bits
	lda #INT_USBRES | INT_SOFRX
	ldx #SL811D_INTSTAT
	jsr storeregd
	pla
	rts

no_reset
	ldx #0
loop	stx currep
	pla		; interrupt status from first read out
	pha
	and pow2,x
	beq next
#ifdef DEBUG
	pha
	lda #"I"
	jsr printc
	txa
	jsr hexout
	pla
#endif
	STREGD(SL811D_INTSTAT)	; clear interrupt bit for endpoint (destroys xr)

	ldx currep
#ifdef DEBUG
	LDREGD(SL811D_INTSTAT)
	sta $8021
	ldx currep
#endif
	; check if EPA is still armed - if so, ignore
	; we only handle EPA irqs, as EPB is only used for auto-ack
	; after a packet
	lda regoff,x
	clc
	adc #EPA_CTRL
	sta SL811D_REG
	lda SL811D_DATA
	and #EPCTL_ARM
	bne stray

	lda endpst,x
	bpl stray		; not active, stray interrupt
	asl
	bpl do_tx
	jsr int_rx
	jmp next
do_tx	
	jsr int_tx
	jmp next

stray	; do not disable irq gen, as this might be an EPB interrupt from setup_epb_rx
	DMSG("STRAY/EPB INT")
	;ldx currep		; stray interrupt, disable interrupt generation
	;lda pow2,x
	;eor #$ff
	;ldx SL811D_IRQEN
	;jsr andstoreregd
next
	ldx currep
	inx
	cpx #MAX_ENDPOINTS
	bcc loop

	pla
	rts	

; interrupt routine for receiving data
int_rx	.(	
#ifdef DEBUG
	lda #"R"
	jsr printc
#endif
	lda regoff,x
	clc
	adc #EPA_PKSTAT
	sta SL811D_REG
	lda SL811D_DATA		; packet status
	sta pkstat
#ifdef DEBUG
	jsr hexout
	lda pkstat
#endif
	and #PKSTAT_ACK | PKSTAT_OVERFL | PKSTAT_ERROR
	cmp #PKSTAT_ACK
	bne ignore		; ignore errors if overflow & ack?

	lda pkstat
	and #PKSTAT_OVERFL | PKSTAT_ERROR
	bne error		; unrecoverable error

	lda regoff,x	
	clc
	adc #EPA_XFERCNT
	sta SL811D_REG		; reg num for xfercnt - remaining free bytes in buffer
	lda SL811D_DATA		; read it
	sec
	sbc txlen,x		; same as tx length given, then no data transferred
	beq done		; empty packet received
	; only partial buffer received
	eor #$ff		; invert the number
	clc			; CMOS -> INC A
	adc #1			; now has bytes transferred
	pha
#ifdef DEBUG
	jsr hexout
#endif

	; set ctrlptr from buffaddr
	jsr set_ptr		; keeps yr
	; copy from sl811 to buffer
	pla
	pha
	jsr set_sl2dat
	pla
	tay

	ldx currep
	lda pkstat		; check if setup packet, 
	and #PKSTAT_SETUP	; if yes, then do not ACK
	bne setup

	tya
	cmp txmax,x		; current tx length
	bne done		; less than max buffer length rx'd

	lda txtog,x
	eor #EPCTL_SEQ
	sta txtog,x

	lda txmax,x		; because if less than txmax, we've branched out already
	jsr step		; steps up bufaddr, steps down length, with length given in ac

	jsr set_txlen		; compute txlen for next tx from txmax, buflen

	; set tx pos and len into SL811
	jsr set_tx2sl		; returns in y the SL811 endpoint control register
ignore
	lda regoff,x
	clc
	adc #EPA_CTRL
	tay
	; start tx
	lda txtog,x
	ora #EPCTL_ARM | EPCTL_ENABLE | EPCTL_RX
	sty SL811D_REG
	sta SL811D_DATA
	clc
	rts
	.)

; callback into caller, with CLC
setup	lda pkstat
	and #PKSTAT_OVERFL
	beq nosetupovl
	lda #$c0
	.byt $2c
nosetupovl
	lda #$80
	.byt $2c
&done	lda #0
	clc
	bcc call

; callback into caller, with SEC
error	tay
	lda #ERR_DEVICE
	sec
call
	/*DMSG("CALL")*/
	pha
	lda #0			; clear status
	sta endpst,x

	lda cbackl,x		; set the ctrlptr as callback address for indirect jump
	sta ctrlptr
	lda cbackh,x
	sta ctrlptr+1
	ora ctrlptr
	beq no_callback
	pla
	ldy cbacktd,x
	; SEC, x=endpoint, y=hw error, ac=error code
	; CLC, x=endpoint, ac=cmd (0=done, $80=setup)
&ijmp	jmp (ctrlptr)
no_callback
	pla
	rts

; interrupt routine for transmitting data
int_tx	.(
#ifdef DEBUG
	lda #"T"
	jsr printc
#endif
	lda regoff,x
	clc
	adc #EPA_PKSTAT
	sta SL811D_REG
	lda SL811D_DATA		; packet status
	tay
#ifdef DEBUG
	jsr hexout
	tya
#endif
	and #PKSTAT_OVERFL | PKSTAT_ERROR
	bne error		; unrecoverable error

	lda regoff,x	
	clc
	adc #EPA_XFERCNT
	sta SL811D_REG		; reg num for xfercnt - remaining free bytes in buffer
	lda SL811D_DATA		; read it

	sec
	sbc txlen,x		; same as tx length given, then no data transferred
	beq done		; empty packet sent
	; only partial buffer received
	eor #$ff		; invert the number
	clc
	adc #1			; now has bytes transferred
#ifdef DEBUG
	pha
	jsr hexout
	pla
#endif
	cmp txmax,x		; current tx length
	bne done		; less than max buffer length tx'd


	lda txmax,x		; because if less than txmax, we've branched out already
	jsr step		; steps up bufaddr, steps down length, len in ac

	jsr set_txlen		; compute txlen for next tx from txmax, buflen

	lda txlen,x	
	bne nofix		; next tx is empty data
	lda txflg,x
	and #USBD_FLAGS_FIXLEN ; and flags is fixlen
	bne done		; then we are done, do not send empty packet
nofix
	; set ctrlptr from buffaddr
	jsr set_ptr
	; copy from buffer to sl811
	jsr set_dat2sl		; uses txlen (not ac as sl2dat)	destroys xr

	ldx currep
	lda txtog,x
	eor #EPCTL_SEQ
	sta txtog,x
repeat
	jsr setup_epb_rx

	; set tx pos and len into SL811
	jsr set_tx2sl	; returns in y the SL811 endpoint control register

	; start tx
	lda txtog,x
	ora #EPCTL_ARM | EPCTL_ENABLE | EPCTL_TX
	sty SL811D_REG
	sta SL811D_DATA
#ifdef DEBUG
	pha
	lda #"P"
	jsr printc
	txa
	jsr hexout
	tya
	jsr hexout
	pla
	pha
	jsr hexout
	pla
#endif
	lda txlen,x
	cmp txmax,x
	bne lastpacket
	clc
	rts

lastpacket		; busy-loop till packet has been sent, then immediately call callback
	lda regoff,x
	clc
	adc #EPA_CTRL
	tay
lp1	sty SL811D_REG
	lda SL811D_DATA
	and #EPCTL_ARM
	bne lp1		; ARM bit still set, not yet finished

	jmp done
	.)

	.)

;-----------------------------------------------------------

&sl811d_send_stall .(
	DMSG("SEND STALL")
	cpx #MAX_ENDPOINTS
	bcs err
	php
	sei
	jsr setstallack
	lda #$80
	sta endpst,x
	lda #EPCTL_ARM | EPCTL_ENABLE | EPCTL_TX | EPCTL_STALL
	jmp setuptx
err	rts
	.)

&sl811d_send_ack .(
	DMSG("SEND ACK")
	cpx #MAX_ENDPOINTS
	bcs err
	php
	sei
	jsr setstallack
	lda #$80
	sta endpst,x
	lda #EPCTL_ARM | EPCTL_ENABLE | EPCTL_TX
	jmp setuptx
err	rts
	.)

&sl811d_recv_ack .(
	; don't care, we handle that with automatic 
	; receive (note: we should handle the return value
	; of the auto rx EPB interrupt appropriately though!)
	php
	sei
	sta ctrlptr
	sty ctrlptr+1
	jsr ijmp
	plp
	rts
;	cpx #MAX_ENDPOINTS
;	bcs err
;	php
;	sei
;	jsr setstallack
;	lda #$c0
;	sta endpst,x
;	lda #EPCTL_ARM | EPCTL_ENABLE | EPCTL_RX
;	jmp setuptx
;err	rts
	.)

setstallack .(
	sta cbackl,x
	tya
	sta cbackh,x
	lda #0
	sta buflenl,x
	sta buflenh,x
	sta txlen,x
	lda txtog,x
	eor #EPCTL_SEQ
	sta txtog,x
	rts
	.)


&sl811d_set_rx .(
	php	; save against interrupt routine
	sei

	jsr set_rxtx
	bcs end

	/*DMSG("SET_RX")*/

	stx currep

	lda #$c0
	sta endpst,x		; status is active ($80), and rx ($40)

	; calculate transaction length, set into cnt
	jsr set_txlen

	lda #EPCTL_ARM | EPCTL_ENABLE | EPCTL_RX
	jmp setuptx

&end	/*DMSG("SET_RX_END")*/
	plp
	sec
	rts
	.)


&sl811d_set_tx .(
	php	; save against interrupt routine
	sei

	jsr set_rxtx
	bcs end
	/*DMSG("SET_TX")*/

	stx currep

	lda #$80
	sta endpst,x		; status is active ($80), and tx (not $40)

	; set ctrlptr from buffaddr
	jsr set_ptr

	; calculate transaction length, set into txlen
	jsr set_txlen

#ifdef DEBUG
	lda #"K"
	jsr printc
	lda txmax,x
	jsr hexout
	lda txlen,x
	jsr hexout
	lda #SL811D_INTSTAT
	sta SL811D_REG
	lda SL811D_DATA
	jsr hexout
	lda #SL811D_IRQEN
	sta SL811D_REG
	lda SL811D_DATA
	jsr hexout
#endif

	; copy data to SL811; in x=endpoint, txlen=length, ctrlptr=buffer pointer
	jsr set_dat2sl

	ldx currep
	jsr setup_epb_rx

	ldx currep
	lda #EPCTL_ARM | EPCTL_ENABLE | EPCTL_TX
&setuptx
	pha

	; set tx pos and len into SL811
	jsr set_tx2sl	; returns in y the SL811 endpoint control register

	; clear interrupt flag and enable interrupt
	jsr set_int

	; start tx
	lda regoff,x
	clc
	adc #EPA_CTRL
	tay
	pla
	ora txtog,x
	STREGYD()
#ifdef DEBUG
	pha
	lda #"P"
	jsr printc
	txa
	jsr hexout
	tya
	jsr hexout
	pla
	pha
	jsr hexout
	pla
#endif
	; check if sending the last packet. if yes, poll for completion and do callback
	and #EPCTL_TX
	beq notlast	; not sending, then end
	lda txmax,x
	cmp txlen,x
	beq notlast	; packet is max size, then not last packet
	;lastpacket to send, poll for completion
	lda regoff,x
	clc
	adc #EPA_CTRL
	tay
lp1	sty SL811D_REG
	lda SL811D_DATA
	and #EPCTL_ARM
	bne lp1		; ARM bit still set, not yet finished

	lda currep
	pha
	jsr done	; do the callback (which sets up the initctrl setup packet rx)
	pla
	sta currep
	tax

notlast	plp
	clc
	rts
	.)

;-----------------------------------------------------------
; helpers

; setup EPB for a zero-byte receive that is activated 
; directly after the last send (via EPA/B switch)	
setup_epb_rx .(
	lda txlen,x
	cmp txmax,x	; if tx len is not max txlen, then this is the last packet
	beq notlast

	lda regoff,x
	clc
	adc #EPB_LEN
	tay
	lda #0
	STREGYD()
	dey		; EPB_ADDR
	lda #$ff
	STREGYD()
	dey		; EPB_CTRL
waitepb	
	sty SL811D_REG
	lda SL811D_DATA
	and #EPCTL_ARM
	bne waitepb	; wait till previous set has finished

	lda txtog,x	; OR in the DATA bit
	eor #0	;EPCTL_SEQ
	ora #EPCTL_ARM | EPCTL_ENABLE | EPCTL_RX ; next dataset is EPA
	/*DMSG("EPB CTRL")*/
	STREGYD()

	lda txtog,x	; next dataset for the next EPA op is EPB!
	ora #EPCTL_NEXTDSET
	sta txtog,x
notlast
	rts
	.)

	
set_int	.(
	; clear interrupt for this endpoint
;	lda pow2,x
;	ldy #SL811D_INTSTAT
;	STREGYD()

	; enable interrupt for this endpoint
	ldy #SL811D_IRQEN
	sty SL811D_REG
	lda SL811D_DATA
	ora pow2,x
	STREGYD()
	rts
	.)
	
; copy data from control block to 
; internal data structures
set_rxtx .(
	cpx #MAX_ENDPOINTS
	bcs err_endp
	sta ctrlptr
	sty ctrlptr+1
	ldy #USBD_CHAN_BUF	; copy over the buffer address
	lda (ctrlptr),y
	sta bufaddrl,x
	iny
	lda (ctrlptr),y
	sta bufaddrh,x
	iny			; USBD_CHAN_LEN
	lda (ctrlptr),y		; copy over the buffer length
	sta buflenl,x
	iny
	lda (ctrlptr),y
	sta buflenh,x
	iny			; USBD_CHAN_DONE_CB
	lda (ctrlptr),y		; copy over the callback address
	sta cbackl,x
	iny
	lda (ctrlptr),y
	sta cbackh,x
	iny			; USBD_CHAN_FLAGS
	lda (ctrlptr),y
	sta txflg,x
#if USBD_FLAGS_TOGGLE = $80
#if EPCTL_SEQ = $40
	and #USBD_FLAGS_TOGGLE
	lsr
	sta txtog,x		; because sequence bit is $40
	clc
#else
#error assumption not held
#endif
#else
#error assumption not held
#endif
	iny			; USBD_CHAN_PARAM
	lda (ctrlptr),y
	sta cbacktd,x
 	rts
err_endp
	lda #ERR_ENDPOINT_NO
	rts
	.)

; in xr=endpoint, sets ctrlptr from bufaddr
set_ptr .(
	lda bufaddrl,x
	sta ctrlptr
	lda bufaddrh,x
	sta ctrlptr+1
	rts
	.)

; in xr=endpoint, ac=number of bytes
set_sl2dat .(
	sta cnt
	lda txpos,x
	tax
	ldy #0
copy	stx SL811D_REG
	lda SL811D_DATA
	sta (ctrlptr),y
	inx
	iny
	dec cnt
	bne copy
	rts
	.)

set_dat2sl .(
	lda txlen,x
	sta cnt
	lda txpos,x
	tax
	ldy #0
copy	lda (ctrlptr),y
	jsr storeregd
	inx
	iny
	dec cnt
	bne copy
	rts
	.)

; in xr=endpoint
; sets transaction length into txlen
set_txlen .(
	lda txmax,x
	sta txlen,x
	ldy buflenh,x	; more than 256 byte left, 
	bne doit 	; then max tx len
	cmp buflenl,x	; less then 256 byte, then compare with max tx len
	bcc doit	; larger, then use max tx len
	lda buflenl,x	; otherwise use bytes left
	sta txlen,x
doit	
#ifdef DEBUG
	lda #"L"
	jsr printc
	lda txlen,x
	jsr hexout
#endif
	rts
	.)

; in a=length of transaction, x=endpoint, steps the
; bufaddr and buflen values up resp. down
step	.(
	/*DMSG("STEP")*/
	tay
	clc
	adc bufaddrl,x
	sta bufaddrl,x
	lda #0
	adc bufaddrh,x
	sta bufaddrh,x

	tya
	eor #$ff	; substract stored length from buffer len
	sec		; adding the inverse
	adc buflenl,x
	sta buflenl,x
	lda #$ff
	adc buflenh,x
	sta buflenh,x
	ora buflenl,x	; sets zero bit if final length is zero
	rts		; has carry clear on underflow (i.e. txlen larger than actual data len)
	.)

; in x=endpoint, sets the txpos/txlen values 
; into the SL811 registers
; returns in yr the SL811 register for the CTRL
set_tx2sl .(
#ifdef DEBUG
	lda #"X"
	jsr printc
#endif
	lda regoff,x
	clc
	adc #EPA_LEN
	tay
	lda txlen,x
#ifdef DEBUG
	pha
	jsr hexout
	pla
#endif
	jsr storeregdy
	dey
	sty SL811D_REG	; EPA_ADDR
	lda txpos,x
	sta SL811D_DATA
#ifdef DEBUG
	jsr hexout
#endif
	dey		; EPA_CTRL
	rts
	.)

;-----------------------------------------------------------
; helpers

; clear the interrupt status(?)
clearirq .(
        lda #$FF
        STD_INTSTAT
        rts
        .)

andstoreregd .(
        stx SL811D_REG
        and SL811D_DATA
        stx SL811D_REG
        sta SL811D_DATA
        rts
        .)

orstoreregd .(
        stx SL811D_REG
        ora SL811D_DATA
        stx SL811D_REG
        sta SL811D_DATA
        rts
        .)

storeregd .(
        stx SL811D_REG
        sta SL811D_DATA
        rts
        .)

storeregdy .(
        sty SL811D_REG
        sta SL811D_DATA
        rts
        .)

loadregd .(
        stx SL811D_REG
        lda SL811D_DATA
        rts
        .)

	.)

