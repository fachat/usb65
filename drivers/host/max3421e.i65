/*
    (C) 2011 Andre Fachat
    
    This file is part of the 6502 USB Device Driver.

    The 6502 USB Device Driver is free software: you can redistribute it and/or modify
    it under the terms of the Lesser GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    The 6502 USB Device Driver is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    Lesser GNU General Public License for more details.

    You should have received a copy of the Lesser GNU General Public License
    along with the 6502 USB Device Driver. If not, see <http://www.gnu.org/licenses/>.
*/

/*
 * MAX3420E register and bit definitions
 */

#ifndef MAX3421_H
#define	MAX3421_H

/* note: using the lowbyte avoid "cutting word relocation ..." warnings, as MAX3421E_EnMask is undefined */
#define	max3421e_enable()	\
	lda #<MAX3421E_EnMask	:\
	jsr spi_enable

#define	max3421e_disable()	\
	jsr spi_disable

#define	spi_wra()		\
	jsr spi_wra

#if 0

#define	wreg(reg, val)		\
	ldx #(reg)		:\
	lda #(val)		:\
	jsr wreg_x

#define	wregAS(reg, val)	\
	ldx #(reg | 0x01)	:\
	lda #(val)		:\
	jsr wreg_x

#define	wrac(reg)		\
	ldx #(reg)		:\
	jsr wreg_x

#define	wracAS(reg)		\
	ldx #(reg | 0x01)	:\
	jsr wreg_x

#define	rreg(reg)		\
	ldx #(reg)		:\
	jsr rreg_x

#define	rregAS(reg)		\
	ldx #(reg | 0x01)	:\
	jsr rreg_x

#define	max3421e_checkint()	\
	spi_checkint(MAX3421E_EnMask)

#else

#define	wreg(reg, val)		\
	max3421e_enable()	:\
	lda #(reg) | 0x02	:\
	spi_wra()		:\
	lda #(val)		:\
	spi_wra()		:\
	max3421e_disable()

#define	wregAS(reg, val)	\
	max3421e_enable()	:\
	lda #(reg) | 0x03	:\
	spi_wra()		:\
	lda #(val)		:\
	spi_wra()		:\
	max3421e_disable()

#define	wrac(reg)		\
	pha			:\
	max3421e_enable()	:\
	lda #(reg) | 0x02	:\
	spi_wra()		:\
	pla			:\
	spi_wra()		:\
	max3421e_disable()

#define	wracK(reg)		\
	pha			:\
	max3421e_enable()	:\
	lda #(reg) | 0x02	:\
	spi_wra()		:\
	pla			:\
	pha			:\
	spi_wra()		:\
	max3421e_disable()	:\
	pla

#define	wracAS(reg)		\
	pha			:\
	max3421e_enable()	:\
	lda #(reg) | 0x03	:\
	spi_wra()		:\
	pla			:\
	spi_wra()		:\
	max3421e_disable()

#define	rreg(reg)		\
	max3421e_enable()	:\
	lda #reg | 0x00		:\
	spi_wra()		:\
	spi_wra()		:\
	pha			:\
	max3421e_disable()	:\
	pla

#define	rregAS(reg)		\
	max3421e_enable()	:\
	lda #reg | 0x01		:\
	spi_wra()		:\
	spi_wra()		:\
	pha			:\
	max3421e_disable()	:\
	pla

#define max3421e_checkint()     \
        spi_checkint(MAX3421E_EnMask)

#endif	

#if 0	
#define	SETBIT(reg, val)	\
	max3421e_enable()	:\
	lda #(reg) | 0x00	:\
	spi_wra()		:\
	spi_wra()		:\
	pha			:\
	max3421e_disable()	:\
	max3421e_enable()	:\
	lda #(reg) | 0x02	:\
	spi_wra()		:\
	pla			:\
	ora #val		:\
	spi_wra()		:\
	max3421e_disable()

#define	CLRBIT(reg, val)	\
	max3421e_enable()	:\
	lda #(reg) | 0x00	:\
	spi_wra()		:\
	spi_wra()		:\
	pha			:\
	max3421e_disable()	:\
	max3421e_enable()	:\
	lda #(reg) | 0x02	:\
	spi_wra()		:\
	pla			:\
	and #255-(val)		:\
	spi_wra()		:\
	max3421e_disable()

#else

#define	CLRBIT(reg, val)	\
	rreg(reg)		:\
	and #255-val		:\
	wrac(reg)

#define	SETBIT(reg, val)	\
	rreg(reg)		:\
	ora #val		:\
	wrac(reg)
		
#endif

// ------------------------------------------------------------------------------
// taken from the MAXIM sample enumeration code from their web site
// slightly modified to use the macros from above


// MAX3420E_BF1.h
// Macros
// See the single bug fix below.
//

#define MSB(word) (BYTE)(((WORD)(word) >> 8) & 0xff)
#define LSB(word) (BYTE)((WORD)(word) & 0xff)

// MAX3421E Registers (in host mode)
#define rRCVFIFO 	1<<3
#define rSNDFIFO  	2<<3
#define rSUDFIFO    	(4<<3)
#define rRCVBC   	6<<3
#define rSNDBC    	7<<3
#define rUSBIRQ     	13<<3
#define rUSBIEN     	14<<3
#define rUSBCTL     	15<<3
#define rCPUCTL     	16<<3
#define rPINCTL     	(17<<3)
#define rRevision   	18<<3
#define rIOPINS1       	20<<3
#define rIOPINS2       	21<<3
#define rGPINIRQ       	22<<3
#define rGPINIEN       	23<<3
#define rGPINPOL       	24<<3
#define rHIRQ       	25<<3
#define rHIEN       	26<<3
#define rMODE       	27<<3
#define rPERADDR       	28<<3
#define rHCTL       	29<<3
#define rHXFR       	30<<3
#define rHRSL       	31<<3

// R13 USBIRQ register bits
#define bmVBUSIRQ   0x40
#define bmNOVBUSIRQ 0x20
#define bmOSCOKIRQ  0x01

// R14 USBIEN register bits
#define bmVBUSIE    0x40
#define bmNOVBUSIE  0x20
#define bmOSCOKIE   0x01

// R15 USBCTL Register
#define bmCHIPRES   0x20
#define bmPWRDOWN   0x10

// R16 CPUCTL Register
#define bmPULSEWID1	0x80
#define bmPULSEWID0	0x40
#define bmIE        0x01

// R17 PINCTL Register
#define bmFDUPSPI   0x10
#define bmINTLEVEL  0x08
#define bmPOSINT    0x04
#define bmGPXB      0x02
#define	bmGPXA      0x01

// GPX[B:A] settings (PINCTL register)
#define gpxOPERATE  0x00
#define gpxVBDETECT 0x01
#define gpxBUSACT   0x02
#define gpxSOF      0x03

// leaving out IOPINS1/2, GPIN* for now

// R25 HIRQ
#define	bmHXFRDNIRQ	0x80
#define	bmFRAMEIRQ	0x40
#define	bmCONDETIRQ	0x20
#define	bmSUSDNIRQ	0x10
#define	bmSNDBAVIRQ	0x08
#define	bmRCVDAVIRQ	0x04
#define	bmRWUIRQ	0x02
#define	bmBUSEVENTIRQ	0x01

// R26 HIEN
#define	bmHXFRDNIE	0x80
#define	bmFRAMEIE	0x40
#define	bmCONDETIE	0x20
#define	bmSUSDNIE	0x10
#define	bmSNDBAVIE	0x08
#define	bmRCVDAVIE	0x04
#define	bmRWUIE		0x02
#define	bmBUSEVENTIE	0x01

// R27 MODE
#define	bmDPPULLDN	0x80
#define	bmDMPULLDN	0x40
#define	bmDELAYISO	0x20
#define	bmSEPIRQ	0x10
#define	bmSOFKAENAB	0x08
#define	bmHUBPRE	0x04
#define	bmLOWSPEED	0x02
#define	bmHOST		0x01

// R29 HCTL
#define	bmSNDTOG1	0x80
#define	bmSNDTOG0	0x40
#define	bmRCVTOG1	0x20
#define	bmRCVTOG0	0x10
#define	bmSIGRSM	0x08
#define	bmSAMPLEBUS	0x04
#define	bmFRMRST	0x02
#define	bmBUSRST	0x01

// R30 HXFR
#define	bmHS		0x80
#define	bmISO		0x40
#define	bmOUTNIN	0x20
#define	bmSETUP		0x10
#define	bmEP3		0x08
#define	bmEP2		0x04
#define	bmEP1		0x02
#define	bmEP0		0x01

#define	tokSETUP	(bmSETUP)
#define	tokIN		(0)
#define	tokOUT		(bmOUTNIN)
#define	tokHSIN		(bmHS)
#define	tokHSOUT	(bmHS+bmOUTNIN)

// R31 HRSL
#define	bmJSTATUS	0x80
#define	bmKSTATUS	0x40
#define	bmSNDTOGRD	0x20
#define	bmRCVTOGRD	0x10
#define	bmHRSLT3	0x08
#define	bmHRSLT2	0x04
#define	bmHRSLT1	0x02
#define	bmHRSLT0	0x01

#define	bmHRESULT	(bmHRSLT0+bmHRSLT1+bmHRSLT2+bmHRSLT3)

// result values (most likely)
#define	hrSUCCESS	0x00	/* successful transfer */
#define	hrBUSY		0x01	/* SIE is busy, transfer pending */
#define	hrNAK		0x04	/* Peripheral returned NAK */
#define	hrSTALL		0x05	/* Peripheral returned STALL */
// rest of the results
#define	hrBADREQ	0x02	/* bad value in HXFR register */
#define	hrUNDEF		0x03	/* - reserved - */
#define	hrTOGERR	0x06	/* toggle error */
#define	hrWRONGPID	0x07	/* received the wrong PID */
#define	hrBADBC		0x08	/* bad byte count */
#define	hrPIDERR	0x09	/* Receive PID is corrupt */
#define	hrPKTERR	0x0a	/* Packet error (stuff, EOP) */
#define	hrCRCERR	0x0b	/* CRC error */
#define	hrKERR		0x0c	/* K-state instead of response */
#define	hrJERR		0x0d	/* J-state instead of response */
#define	hrTIMEOUT	0x0e	/* device did not respond in time */
#define	hrBABBLE	0x0f	/* Device talked too long */


// ************************
// Standard USB Requests
#if 1
#define SR_GET_STATUS		0x00	// Get Status
#define SR_CLEAR_FEATURE	0x01	// Clear Feature
#define SR_RESERVED		0x02	// Reserved
#define SR_SET_FEATURE		0x03	// Set Feature
#define SR_SET_ADDRESS		0x05	// Set Address
#define SR_GET_DESCRIPTOR	0x06	// Get Descriptor
#define SR_SET_DESCRIPTOR	0x07	// Set Descriptor
#define SR_GET_CONFIGURATION	0x08	// Get Configuration
#define SR_SET_CONFIGURATION	0x09	// Set Configuration
#define SR_GET_INTERFACE	0x0a	// Get Interface
#define SR_SET_INTERFACE	0x0b	// Set Interface
#else
#define SR_GET_STATUS		0x00	
#define SR_CLEAR_FEATURE	0x01
#define SR_RESERVED		0x02
#define SR_SET_FEATURE		0x03
#define SR_SET_ADDRESS		0x05
#define SR_GET_DESCRIPTOR	0x06
#define SR_SET_DESCRIPTOR	0x07
#define SR_GET_CONFIGURATION	0x08
#define SR_SET_CONFIGURATION	0x09
#define SR_GET_INTERFACE	0x0a
#define SR_SET_INTERFACE	0x0b
#endif

// Get Descriptor codes	
#if 1
#define GD_DEVICE		0x01	// Get device descriptor: Device
#define GD_CONFIGURATION	0x02	// Get device descriptor: Configuration
#define GD_STRING		0x03	// Get device descriptor: String
#define GD_HID	            	0x21	// Get descriptor: HID
#define GD_REPORT	        0x22	// Get descriptor: Report
#else
#define GD_DEVICE		0x01
#define GD_CONFIGURATION	0x02
#define GD_STRING		0x03
#define GD_HID	            	0x21
#define GD_REPORT	        0x22
#endif

// SETUP packet offsets
#define bmRequestType           0
#define	bRequest		1
#define wValueL			2
#define wValueH			3
#define wIndexL			4
#define wIndexH			5
#define wLengthL		6
#define wLengthH		7

// HID bRequest values
#define GET_REPORT		1
#define GET_IDLE		2
#define GET_PROTOCOL            3
#define SET_REPORT		9
#define SET_IDLE		0x0A
#define SET_PROTOCOL            0x0B
#define INPUT_REPORT            1

// For active-high lights attached to MAX3420E GP-Output pins.
#define L0_OFF 	CLRBIT(rGPIO, 0x01)	// wreg(rGPIO,(rreg(rGPIO) & 0xFE));
#define L0_ON 	SETBIT(rGPIO, 0x01)	// wreg(rGPIO,(rreg(rGPIO) | 0x01));
#define L1_OFF 	CLRBIT(rGPIO, 0x02)	// wreg(rGPIO,(rreg(rGPIO) & 0xFD));
#define L1_ON 	SETBIT(rGPIO, 0x02)	// wreg(rGPIO,(rreg(rGPIO) | 0x02));
#define L2_OFF 	CLRBIT(rGPIO, 0x04)	// wreg(rGPIO,(rreg(rGPIO) & 0xFB));
#define L2_ON 	SETBIT(rGPIO, 0x04)	// wreg(rGPIO,(rreg(rGPIO) | 0x04));
#define L3_OFF 	CLRBIT(rGPIO, 0x08)	// wreg(rGPIO,(rreg(rGPIO) & 0xF7));
#define L3_ON 	SETBIT(rGPIO, 0x08)	// wreg(rGPIO,(rreg(rGPIO) | 0x08));
//#define L0_BLINK wreg(rGPIO,(rreg(rGPIO) ^ 0x01));
//#define L1_BLINK wreg(rGPIO,(rreg(rGPIO) ^ 0x02));
//#define L2_BLINK wreg(rGPIO,(rreg(rGPIO) ^ 0x04));
//#define L3_BLINK wreg(rGPIO,(rreg(rGPIO) ^ 0x08));

//#define SETBIT(reg,val) wreg(reg,(rreg(reg)|val));
//#define CLRBIT(reg,val) wreg(reg,(rreg(reg)&~val));

// ************ BUG FIX ************
//#define STALL_EP0 wreg(9,0x23); // Set all three EP0 stall bits--data stage IN/OUT and status stage
// BUG FIX 2-9-06. The above statement hard-codes the register number to 9, ignoring the fact that
// the wreg function expects the register numbers to be pre-shifted 3 bits to put them into the 5 MSB's of
// the SPI command byte. Here is the correction:

#define STALL_EP0 wreg(rEPSTALLS,0x23);	// Set all three EP0 stall bits--data stage IN/OUT and status stage

// ******** END OF BUG FIX**********


#endif

