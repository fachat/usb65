
max3421e.a65


   61 T:1000                                    ;MAX3421E_EnMask = 0x04

   63 T:1000                                    ;#define DEBUG

usb.i65


   27 T:1000                                    ; ---------------------------------------------------------------------------------------
   28 T:1000                                    ; usbdev_init parameter

   33 T:1000                                    ; ---------------------------------------------------------------------------------------
   34 T:1000                                    ; USB setup packet

   44 T:1000                                    ; ---------------------------------------------------------------------------------------
   45 T:1000                                    ; USB host control structure
   46 T:1000                                    ; interface to the various usb_* functions

   60 T:1000                                    ; ---------------------------------------------------------------------------------------
   61 T:1000                                    ; input value to the poll routine when carry is set

   65 T:1000                                    ; ---------------------------------------------------------------------------------------
   66 T:1000                                    ; return value from usb_cb_detected on success (CLC)

   71 T:1000                                    ; ---------------------------------------------------------------------------------------
   72 T:1000                                    ; poll register struct
   73 T:1000                                    ; used to register an endpoint poll callback

   80 T:1000                                    ; ---------------------------------------------------------------------------------------
   81 T:1000                                    ; USB standard values

   83 T:1000                                    ; PID Values

max3421e.i65


hostmsg.i65


debug.i65


max3421e.a65


   70 T:1000                                     .( 

   72 T:1000                                     .importzp MAX3421E_EnMask

   74 T:1000                                     .zero 
   75 Z:0004  00 00                    ctrlptr   .word 0
   76 Z:0006  00 00                    dataptr   .word 0
   77 Z:0008                                     .data 

   79 D:0400  00                       rootspd   .byt 0           ; speed (low/full) of attached device (e.g. root hub)
   80 D:0401  00                       polled    .byt 0           ; when set, device is present

   82 D:0402  00                       len       .byt 0           ; length of a (requested IN) packet
   83 D:0403  00                       endpt     .byt 0
   84 D:0404  00                       flags     .byt 0
   85 D:0405  00                       maxpklen  .byt 0           ; maximum allowed size for packet
   86 D:0406  00                       cnt       .byt 0
   87 D:0407  00                       rcnt      .byt 0           ; retry count
   88 D:0408  00                       bcnt      .byt 0           ; byt count up to len for packet transfer

   93 D:0409                                     .text 

   95 T:1000                                    ;-----------------------------------------------------------
   96 T:1000                                    ; initialization

   98 T:1000                                    ; check
   99 T:1000                           usb_host_init .( 

  101 T:1000                                    ; can't really detect HW for now

  103 T:1000  20 00 00                           jsr spi_init

  105 T:1003                                    ; SPI = full duplex, INTLEVEL = negative level
  106 T:1003                                    ; should set GPX if used, is not used here
  107 T:1003  a2 88                              ldx #((17<<3))
  107 T:1005  a9 18                              lda #($10+$08)
  107 T:1007  20 00 00                           jsr wreg_x

  109 T:100a                                    ; reset (leaves FDUPSPI and INTLEVEL as they are)
  110 T:100a  a2 78                              ldx #(15<<3)
  110 T:100c  a9 20                              lda #($20)
  110 T:100e  20 00 00                           jsr wreg_x
  111 T:1011                                    ; deassert reset
  112 T:1011  a2 78                              ldx #(15<<3)
  112 T:1013  a9 00                              lda #(0)
  112 T:1015  20 00 00                           jsr wreg_x

  114 T:1018                                    ; wait for oscillator (chip reset stops it, need to wait for coming up)
  115 T:1018  a2 68                    l0        ldx #(13<<3)
  115 T:101a  20 00 00                           jsr rreg_x
  116 T:101d                                    ;sta $8000+999
  117 T:101d                                    ;inc $8000+998
  118 T:101d  29 01                              and #$01
  119 T:101f  f0 f7                              beq l0

  121 T:1021                                    ; set into HOST mode
  122 T:1021                                    ; weak pull down on D+ and D- for SAMPLEBUS to work
  123 T:1021  a2 d8                              ldx #(27<<3)
  123 T:1023  a9 c1                              lda #($01+$80+$40)
  123 T:1025  20 00 00                           jsr wreg_x

  125 T:1028                                    ; success
  126 T:1028  18                                 clc 

  128 T:1029                                    ; Note: we don't use interrupts, so we don't need to enable
  129 T:1029                                    ; them here - we just poll them in polldev

  132 T:1029  a9 ff                              lda #<-1
  133 T:102b  8d 01 04                           sta polled             ; trigger initial device detection check
  134 T:102e  60                       err       rts 
  135 T:102f                                     .) 

  137 T:102f                           usb_host_polldev .( 

  141 T:102f  ad 01 04                           lda polled
  142 T:1032  30 09                              bmi check

  144 T:1034  a2 c8                              ldx #(25<<3)
  144 T:1036  20 00 00                           jsr rreg_x
  145 T:1039  29 20                              and #$20
  146 T:103b  f0 0c                              beq nochange

  148 T:103d                           check     
  149 T:103d  a9 20                              lda #$20
  150 T:103f  a2 c8                              ldx #(25<<3)
  150 T:1041  20 00 00                           jsr wreg_x                ; clear interrupt bit, just in case

  152 T:1044                                    ; only called when changed, so ok to change LOWSPEED bit
  153 T:1044                                    ; with this call
  154 T:1044  20 3b 13                           jsr queryusbdevice
  155 T:1047  90 05                              bcc notfnd
  156 T:1049                           nochange  
  157 T:1049  ad 01 04                           lda polled             ; set in queryusbdevice
  158 T:104c  d0 02                              bne found
  159 T:104e  38                       notfnd    sec 
  160 T:104f  60                                 rts 
  161 T:1050  18                       found     clc 
  162 T:1051  60                                 rts 
  163 T:1052                                     .) 

  165 T:1052                                    ; init the chip
  166 T:1052                           usb_host_devinit .( 

  168 T:1052  20 79 13                           jsr usbreset

  170 T:1055                                    ;jsr clearirq

  172 T:1055  a9 0a                              lda #10
  173 T:1057  20 00 00                           jsr pause

  175 T:105a  20 3b 13                           jsr queryusbdevice

  177 T:105d  b0 04                              bcs device

  179 T:105f                                    ;jsr clearirq
  180 T:105f  a9 00                    nodev     lda #0          ; no device found error condition
  181 T:1061  38                                 sec                    ; error

  183 T:1062  60                                 rts 
  184 T:1063                           device    

  186 T:1063  a9 01                              lda #1
  187 T:1065  20 00 00                           jsr pause
  188 T:1068  20 3b 13                           jsr queryusbdevice
  189 T:106b  90 f2                              bcc nodev

  191 T:106d  18                                 clc 

  193 T:106e  60                                 rts 
  194 T:106f                                     .) 

  196 T:106f                           usb_host_reset .( 

  199 T:106f  8d 00 04                           sta rootspd             ; store root speed

  201 T:1072  aa                                 tax 
  202 T:1073  d0 0a                              bne init_full

  204 T:1075                                    ; init chip for low speed device
  205 T:1075                           init_low  
  206 T:1075  a2 d8                              ldx #(27<<3)
  206 T:1077  20 00 00                           jsr rreg_x
  207 T:107a  09 02                              ora #$02

  209 T:107c  4c 86 10                           jmp setspeed

  211 T:107f                                    ; init chip for full speed device
  212 T:107f                           init_full 
  213 T:107f  a2 d8                              ldx #(27<<3)
  213 T:1081  20 00 00                           jsr rreg_x
  214 T:1084  29 fd                              and #255-$02
  215 T:1086                           setspeed  
  216 T:1086  a2 d8                              ldx #(27<<3)
  216 T:1088  20 00 00                           jsr wreg_x

  218 T:108b                                    ; set 0 as peripheral address for a start
  219 T:108b  a2 e0                              ldx #(28<<3)
  219 T:108d  a9 00                              lda #(0)
  219 T:108f  20 00 00                           jsr wreg_x

  221 T:1092                                    ;jsr usbreset ; reset attached device
  222 T:1092  20 95 13                           jsr startsof

  224 T:1095                                    ; clear connect IRQ, as may be set by changing LOWSPEED
  225 T:1095  a2 c8                              ldx #(25<<3)
  225 T:1097  a9 20                              lda #($20)
  225 T:1099  20 00 00                           jsr wreg_x
  226 T:109c                                    ;lda #<-1
  227 T:109c                                    ;sta polled
  228 T:109c  60                                 rts 
  229 T:109d                                     .) 

  231 T:109d                                    ; set params from the HOST_CTRL_* struct
  232 T:109d                           set_params .( 

  237 T:109d  a0 00                              ldy #0
  238 T:109f  b1 04                              lda (ctrlptr),y

  244 T:10a1  a2 e0                              ldx #(28<<3)
  244 T:10a3  20 00 00                           jsr wreg_x
  245 T:10a6  c8                                 iny                    ; HOST_CTRL_ENDPOINT
  246 T:10a7  b1 04                              lda (ctrlptr),y
  247 T:10a9  8d 03 04                           sta endpt

  252 T:10ac  c8                                 iny                    ; HOST_CTRL_SPEED
  253 T:10ad  b1 04                              lda (ctrlptr),y
  254 T:10af  20 1c 13                           jsr set_pream

  256 T:10b2  c8                                 iny                    ; HOST_CTRL_FLAGS
  257 T:10b3  b1 04                              lda (ctrlptr),y
  258 T:10b5  8d 04 04                           sta flags

  260 T:10b8  c8                                 iny                    ; HOST_CTRL_MAXPKLEN low
  261 T:10b9  b1 04                              lda (ctrlptr),y
  262 T:10bb  8d 05 04                           sta maxpklen

  268 T:10be  c9 41                              cmp #$41             ; we currently support only full speed, i.e. up to 64 byte
  269 T:10c0  b0 12                              bcs lenerr                ; equals or larger than $41, than error
  270 T:10c2  c8                                 iny                    ; HOST_CTRL_MAXPKLEN hi
  271 T:10c3  b1 04                              lda (ctrlptr),y
  272 T:10c5  d0 0d                              bne lenerr

  274 T:10c7  c8                                 iny                    ; HOST_CTRL_BUFLEN low
  275 T:10c8  b1 04                              lda (ctrlptr),y         ; buflen
  276 T:10ca                                    ;cmp #$41
  277 T:10ca                                    ;bcs lenerr  ; we currently support only up to $f0 byte transfers (max sl811h buffer)
  278 T:10ca  8d 02 04                           sta len

  282 T:10cd  c8                                 iny 
  283 T:10ce  b1 04                              lda (ctrlptr),y
  284 T:10d0  d0 02                              bne lenerr                ; we currently support only up to 64 byte transfers
  285 T:10d2  18                                 clc 
  286 T:10d3  60                                 rts 

  289 T:10d4  a9 f6                    lenerr    lda #<-10

  291 T:10d6  38                                 sec 
  292 T:10d7  60                                 rts 
  293 T:10d8                                     .) 

  295 T:10d8                                    ; set ctrlptr from the control block
  296 T:10d8                           ptr_to_buffer .( 
  297 T:10d8  a0 08                              ldy #8             ; put buffer address into ctrlptr
  298 T:10da  b1 04                              lda (ctrlptr),y
  299 T:10dc  48                                 pha 
  300 T:10dd  c8                                 iny 
  301 T:10de  b1 04                              lda (ctrlptr),y
  302 T:10e0  85 07                              sta dataptr+1
  303 T:10e2  68                                 pla 
  304 T:10e3  85 06                              sta dataptr
  305 T:10e5  60                                 rts 
  306 T:10e6                                     .) 

  308 T:10e6                           usb_host_get .( 
  309 T:10e6  85 04                              sta ctrlptr
  310 T:10e8  84 05                              sty ctrlptr+1

  312 T:10ea                                    ; clear xfer done irq, just in case
  313 T:10ea  a2 c8                              ldx #(25<<3)
  313 T:10ec  a9 80                              lda #($80)
  313 T:10ee  20 00 00                           jsr wreg_x

  315 T:10f1  20 9d 10                           jsr set_params
  316 T:10f4  b0 06                              bcs end

  318 T:10f6                                    ; set dataptr to data buffer address
  319 T:10f6  20 d8 10                           jsr ptr_to_buffer

  321 T:10f9  4c fd 10                           jmp get_in
  322 T:10fc  60                       end       rts 
  323 T:10fd                                     .) 

  325 T:10fd                                    ; IN transfer into buffer as given (in ctrlptr)
  326 T:10fd                           get_in    .( 

  333 T:10fd                                    ; set retry count
  334 T:10fd  a9 0a                              lda #10
  335 T:10ff  8d 07 04                           sta rcnt

  337 T:1102                                    ; set byte count
  338 T:1102  a9 00                              lda #0
  339 T:1104  8d 08 04                           sta bcnt

  341 T:1107                                    ; clear rvdavirq (twice, for double buffering, just in case)
  342 T:1107  a2 c8                              ldx #(25<<3)
  342 T:1109  a9 04                              lda #($04)
  342 T:110b  20 00 00                           jsr wreg_x
  343 T:110e  a2 c8                              ldx #(25<<3)
  343 T:1110  a9 04                              lda #($04)
  343 T:1112  20 00 00                           jsr wreg_x

  345 T:1115                                    ; set toggle
  346 T:1115  a0 03                              ldy #3
  347 T:1117  b1 04                              lda (ctrlptr),y
  348 T:1119  29 40                              and #$40
  349 T:111b  d0 03                              bne togd1
  350 T:111d  a9 10                              lda #$10
  351 T:111f  2c                                 .byt $2c
  352 T:1120  a9 20                    togd1     lda #$20
  353 T:1122  a2 e8                              ldx #(29<<3)
  353 T:1124  20 00 00                           jsr wreg_x

  355 T:1127                           againin   
  356 T:1127                                    ; start command
  357 T:1127  a9 00                              lda #(0)
  358 T:1129  0d 03 04                           ora endpt             ; BULK/IN command is $0x ORd with endpoint number
  359 T:112c  20 cd 12                           jsr docmd
  360 T:112f  f0 25                              beq noerror                ; hrSUCCESS is 0

  362 T:1131  c9 05                              cmp #$05
  363 T:1133  f0 1d                              beq error_stall
  364 T:1135  c9 0e                              cmp #$0e
  365 T:1137  f0 19                              beq error_timeout
  366 T:1139  c9 04                              cmp #$04
  367 T:113b  d0 0d                              bne doretry
  368 T:113d  ee 27 88                           inc $8800+39
  369 T:1140  2c 04 04                           bit flags             ; check HOST_FLAG_IGNORE_NAK in bit 7
  370 T:1143  10 05                              bpl doretry
  371 T:1145  a9 00                              lda #0
  372 T:1147  4c 5b 11                           jmp no_nak
  373 T:114a                           doretry   
  374 T:114a  ce 07 04                           dec rcnt

  382 T:114d  f0 03                              beq error
  383 T:114f  4c 27 11                           jmp againin
  384 T:1152                           error_stall 
  385 T:1152                                    ;inc $8000+79
  386 T:1152                                    ;jmp error
  387 T:1152                           error_timeout 
  388 T:1152                                    ;inc $8000+78
  389 T:1152                           error     

  393 T:1152  a0 fb                              ldy #<-5
  394 T:1154  38                                 sec 
  395 T:1155  60                                 rts 
  396 T:1156                           noerror   
  397 T:1156                                    ; transfer data
  398 T:1156                                    ; read number of bytes
  399 T:1156  a2 30                              ldx #(6<<3)
  399 T:1158  20 00 00                           jsr rreg_x

  409 T:115b                           no_nak    
  410 T:115b  8d 06 04                           sta cnt
  411 T:115e  8d 26 80                           sta $8000+38
  412 T:1161                                    ; do we want that much data?
  413 T:1161  18                                 clc 
  414 T:1162  6d 08 04                           adc bcnt
  415 T:1165  cd 02 04                           cmp len
  416 T:1168  90 03                              bcc lenok
  417 T:116a  ad 02 04                           lda len
  418 T:116d  38                       lenok     sec 
  419 T:116e  ed 08 04                           sbc bcnt
  420 T:1171  8d 06 04                           sta cnt

  422 T:1174                                    ; data available?
  423 T:1174  c9 00                              cmp #0
  424 T:1176  f0 1a                              beq nodata

  426 T:1178                                    ; read data
  427 T:1178  a9 00                              lda #<MAX3421E_EnMask
  427 T:117a  20 00 00                           jsr spi_enable

  429 T:117d  a9 08                              lda #1<<3
  430 T:117f  20 00 00                           jsr spi_wra

  432 T:1182  a0 00                              ldy #0
  433 T:1184  20 00 00                 next      jsr spi_wra
  434 T:1187  91 06                              sta (dataptr),y
  435 T:1189  c8                                 iny 
  436 T:118a  cc 06 04                           cpy cnt
  437 T:118d  d0 f5                              bne next

  439 T:118f  20 00 00                           jsr spi_disable

  441 T:1192                           nodata    
  442 T:1192                                    ; clear data available interrupt
  443 T:1192  a2 c8                              ldx #(25<<3)
  443 T:1194  a9 04                              lda #($04)
  443 T:1196  20 00 00                           jsr wreg_x
  444 T:1199                                    ; update byte counter
  445 T:1199  ad 06 04                           lda cnt
  446 T:119c  18                                 clc 
  447 T:119d  6d 08 04                           adc bcnt
  448 T:11a0  8d 08 04                           sta bcnt

  450 T:11a3                                    ; are we done yet?
  451 T:11a3                                    ; was last packet full sized?
  452 T:11a3  ad 06 04                           lda cnt
  453 T:11a6  cd 05 04                           cmp maxpklen
  454 T:11a9  d0 0f                              bne done                ; no, then no further packet to receive

  456 T:11ab                                    ; update pointer and length
  457 T:11ab  ad 06 04                           lda cnt
  458 T:11ae  18                                 clc 
  459 T:11af  65 06                              adc dataptr
  460 T:11b1  85 06                              sta dataptr
  461 T:11b3  90 02                              bcc nocarry
  462 T:11b5  e6 07                              inc dataptr+1
  463 T:11b7                           nocarry   
  464 T:11b7  4c 27 11                           jmp againin

  466 T:11ba                           done                       ; update DATA toggle
  467 T:11ba  a0 03                              ldy #3
  468 T:11bc  a2 f8                              ldx #(31<<3)
  468 T:11be  20 00 00                           jsr rreg_x
  469 T:11c1  29 10                              and #$10
  470 T:11c3  f0 06                              beq data0
  471 T:11c5  b1 04                              lda (ctrlptr),y
  472 T:11c7  09 40                              ora #$40
  473 T:11c9  d0 04                              bne wrtog
  474 T:11cb  b1 04                    data0     lda (ctrlptr),y
  475 T:11cd  29 bf                              and #255-$40
  476 T:11cf  91 04                    wrtog     sta (ctrlptr),y

  478 T:11d1                                    ; done
  479 T:11d1  ad 08 04                           lda bcnt
  480 T:11d4  18                                 clc 
  481 T:11d5  60                                 rts 
  482 T:11d6                                     .) 

  484 T:11d6                           usb_host_control .( 

  486 T:11d6  85 04                              sta ctrlptr
  487 T:11d8  84 05                              sty ctrlptr+1

  494 T:11da  20 9d 10                           jsr set_params
  495 T:11dd  b0 32                              bcs err

  497 T:11df                                    ; send setup packet
  498 T:11df  20 f1 12                           jsr sendsetup
  499 T:11e2  b0 2d                              bcs err

  506 T:11e4                                    ; set dataptr to data buffer address
  507 T:11e4  20 d8 10                           jsr ptr_to_buffer

  509 T:11e7                                    ; set to DATA1 toggle
  510 T:11e7  a0 03                              ldy #3
  511 T:11e9  b1 04                              lda (ctrlptr),y
  512 T:11eb  09 40                              ora #$40
  513 T:11ed  91 04                              sta (ctrlptr),y

  515 T:11ef                                    ; host to device or device to host
  516 T:11ef  a0 0a                              ldy #10
  517 T:11f1  b1 04                              lda (ctrlptr),y
  518 T:11f3  30 0f                              bmi receive

  520 T:11f5  18                                 clc                    ; for outnodata
  521 T:11f6  ac 02 04                           ldy len
  522 T:11f9  f0 03                              beq outnodata                ; e.g. setaddr does not have data to be sent

  524 T:11fb  20 12 12                           jsr do_out
  525 T:11fe                           outnodata 
  526 T:11fe  08                                 php 
  527 T:11ff  48                                 pha 

  529 T:1200  a9 80                              lda #($80)           ; HS_IN
  530 T:1202  d0 07                              bne dohs                ; always

  532 T:1204                           receive   
  533 T:1204  20 fd 10                           jsr get_in
  534 T:1207  08                                 php 
  535 T:1208  48                                 pha 

  537 T:1209  a9 a0                              lda #($80+$20)     ; HS_OUT
  538 T:120b                           dohs      

  540 T:120b  20 cd 12                           jsr docmd

  542 T:120e  68                                 pla 
  543 T:120f  28                                 plp 
  544 T:1210  60                                 rts 
  545 T:1211                           err       
  546 T:1211  60                                 rts 

  548 T:1212                                     .) 

  550 T:1212                                    ; OUT transfer into buffer as given (in ctrlptr)
  551 T:1212                                    ; len is the number of bytes to transfer in total
  552 T:1212                           do_out    .( 

  554 T:1212                                    ; set retry count
  555 T:1212  a9 0a                              lda #10
  556 T:1214  8d 07 04                           sta rcnt

  558 T:1217                                    ; set byte count
  559 T:1217  a9 00                              lda #0
  560 T:1219  8d 08 04                           sta bcnt

  562 T:121c                                    ; set toggle
  563 T:121c  a0 03                              ldy #3
  564 T:121e  b1 04                              lda (ctrlptr),y
  565 T:1220  29 40                              and #$40
  566 T:1222  d0 03                              bne togd1
  567 T:1224  a9 40                              lda #$40
  568 T:1226  2c                                 .byt $2c
  569 T:1227  a9 80                    togd1     lda #$80
  570 T:1229  a2 e8                              ldx #(29<<3)
  570 T:122b  20 00 00                           jsr wreg_x

  572 T:122e                           nextout   
  573 T:122e                                    ; computer number of bytes to transfer now
  574 T:122e  ad 02 04                           lda len
  575 T:1231  38                                 sec 
  576 T:1232  ed 08 04                           sbc bcnt
  577 T:1235  cd 05 04                           cmp maxpklen
  578 T:1238  90 03                              bcc lenok
  579 T:123a  ad 05 04                           lda maxpklen
  580 T:123d  8d 06 04                 lenok     sta cnt

  582 T:1240  c9 00                              cmp #0
  583 T:1242  f0 1b                              beq nodata

  585 T:1244                                    ; write data to chip fifo
  586 T:1244  a9 00                              lda #<MAX3421E_EnMask
  586 T:1246  20 00 00                           jsr spi_enable

  588 T:1249  a9 12                              lda #2<<3|2 ; OR#2 is write bit
  589 T:124b  20 00 00                           jsr spi_wra

  591 T:124e  a0 00                              ldy #0
  592 T:1250  b1 06                    next      lda (dataptr),y
  593 T:1252  20 00 00                           jsr spi_wra
  594 T:1255  c8                                 iny 
  595 T:1256  cc 06 04                           cpy cnt
  596 T:1259  d0 f5                              bne next

  598 T:125b  20 00 00                           jsr spi_disable

  600 T:125e  98                                 tya 
  601 T:125f                           nodata    
  602 T:125f                                    ; write number of bytes
  603 T:125f  a2 38                              ldx #(7<<3)
  603 T:1261  20 00 00                           jsr wreg_x
  604 T:1264                           againout  
  605 T:1264                                    ; start command
  606 T:1264  ad 03 04                           lda endpt             ; BULK/OUT command is bmOUTNIN ORd with endpoint number
  607 T:1267  09 20                              ora #($20)
  608 T:1269  20 cd 12                           jsr docmd
  609 T:126c  f0 22                              beq noerror                ; hrSUCCESS is 0

  611 T:126e  c9 05                    retry     cmp #$05
  612 T:1270  f0 1a                              beq error
  613 T:1272  c9 0e                              cmp #$0e
  614 T:1274  f0 16                              beq error
  615 T:1276  c9 04                              cmp #$04
  616 T:1278  d0 0a                              bne doretry
  617 T:127a  2c 04 04                           bit flags             ; check HOST_FLAG_IGNORE_NAK in bit 7
  618 T:127d  10 05                              bpl doretry
  619 T:127f  a9 00                              lda #0
  620 T:1281  4c cb 12                           jmp no_nak
  621 T:1284                           doretry   
  622 T:1284  ce 07 04                           dec rcnt
  623 T:1287  f0 03                              beq error
  624 T:1289  4c 64 12                           jmp againout
  625 T:128c  a0 fb                    error     ldy #<-5
  626 T:128e  38                                 sec 
  627 T:128f  60                                 rts 
  628 T:1290                           noerror   
  629 T:1290                                    ; update byte counter
  630 T:1290  ad 06 04                           lda cnt
  631 T:1293  18                                 clc 
  632 T:1294  6d 08 04                           adc bcnt
  633 T:1297  8d 08 04                           sta bcnt

  635 T:129a                                    ; are we done yet?
  636 T:129a                                    ; was last packet full sized?
  637 T:129a  ad 06 04                           lda cnt
  638 T:129d  cd 05 04                           cmp maxpklen
  639 T:12a0  d0 0f                              bne done                ; no, then no further packet to send

  641 T:12a2                                    ; update pointer and length
  642 T:12a2  ad 06 04                           lda cnt
  643 T:12a5  18                                 clc 
  644 T:12a6  65 06                              adc dataptr
  645 T:12a8  85 06                              sta dataptr
  646 T:12aa  90 02                              bcc nocarry
  647 T:12ac  e6 07                              inc dataptr+1
  648 T:12ae                           nocarry   
  649 T:12ae  4c 2e 12                           jmp nextout

  651 T:12b1                           done                       ; update DATA toggle
  652 T:12b1  a0 03                              ldy #3
  653 T:12b3  a2 f8                              ldx #(31<<3)
  653 T:12b5  20 00 00                           jsr rreg_x
  654 T:12b8  29 20                              and #$20
  655 T:12ba  f0 06                              beq data0
  656 T:12bc  b1 04                              lda (ctrlptr),y
  657 T:12be  09 40                              ora #$40
  658 T:12c0  d0 04                              bne wrtog
  659 T:12c2  b1 04                    data0     lda (ctrlptr),y
  660 T:12c4  29 bf                              and #255-$40
  661 T:12c6  91 04                    wrtog     sta (ctrlptr),y

  663 T:12c8                                    ; done
  664 T:12c8  ad 08 04                           lda bcnt
  665 T:12cb                           no_nak    
  666 T:12cb  18                                 clc 
  667 T:12cc  60                                 rts 
  668 T:12cd                                     .) 

  670 T:12cd                                    ; trigger command and wait for completion
  671 T:12cd                                    ; must keep y
  672 T:12cd                           docmd     .( 
  673 T:12cd  48                                 pha 
  674 T:12ce                                    ; clear xfer done irq, just in case
  675 T:12ce  a2 c8                              ldx #(25<<3)
  675 T:12d0  a9 80                              lda #($80)
  675 T:12d2  20 00 00                           jsr wreg_x

  684 T:12d5  68                                 pla 
  685 T:12d6  a2 f0                              ldx #(30<<3)
  685 T:12d8  20 00 00                           jsr wreg_x                ; store in HXFR

  687 T:12db                                    ; wait for completion
  688 T:12db                           l0        

  692 T:12db  a2 c8                              ldx #(25<<3)
  692 T:12dd  20 00 00                           jsr rreg_x
  693 T:12e0  29 80                              and #$80
  694 T:12e2  f0 f7                              beq l0
  695 T:12e4  a2 c8                              ldx #(25<<3)
  695 T:12e6  20 00 00                           jsr wreg_x                ; clear interrupt bit

  697 T:12e9                                    ; check result
  698 T:12e9  a2 f8                              ldx #(31<<3)
  698 T:12eb  20 00 00                           jsr rreg_x
  699 T:12ee  29 0f                              and #($01+$02+$04+$08); the four result bits
  700 T:12f0                                    ;cmp #hrBUSY
  701 T:12f0                                    ;beq l0
  702 T:12f0                                    ;cmp #0

  708 T:12f0  60                                 rts 
  709 T:12f1                                     .) 

  711 T:12f1                                    ; send a setup packet
  712 T:12f1                           sendsetup .( 

  717 T:12f1  a9 00                              lda #<MAX3421E_EnMask
  717 T:12f3  20 00 00                           jsr spi_enable

  719 T:12f6  a9 22                              lda #(4<<3)|2; OR#2 to set the write bit
  720 T:12f8  20 00 00                           jsr spi_wra

  722 T:12fb                                    ; copy control message to chip fifo
  723 T:12fb  a0 0a                              ldy #10
  724 T:12fd                           c1        
  725 T:12fd  b1 04                              lda (ctrlptr),y

  731 T:12ff  20 00 00                           jsr spi_wra                ; setup packet into sl811 buffer
  732 T:1302  c8                                 iny 
  733 T:1303  c0 12                              cpy #10+8
  734 T:1305  90 f6                              bcc c1

  736 T:1307  20 00 00                           jsr spi_disable

  738 T:130a  a0 0a                              ldy #10
  739 T:130c                           retry     
  740 T:130c                                    ; start SETUP
  741 T:130c  a9 10                              lda #($10)
  742 T:130e  20 cd 12                           jsr docmd
  743 T:1311  f0 07                              beq noerror                ; hrSUCCESS is 0

  745 T:1313  88                                 dey 
  746 T:1314  d0 f6                              bne retry
  747 T:1316  38                                 sec 
  748 T:1317  a0 fb                              ldy #<-5

  750 T:1319  60                                 rts 
  751 T:131a                           noerror   
  752 T:131a  18                                 clc 
  753 T:131b  60                                 rts 
  754 T:131c                                     .) 

  757 T:131c                                    ; set the preamble variable
  758 T:131c                                    ; in: AC = device speed, rootspd = hub speed (0/1 = low/full speed)
  759 T:131c                                    ; must preserve y
  760 T:131c                           set_pream .( 
  761 T:131c  cd 00 04                           cmp rootspd
  762 T:131f  f0 0d                              beq no_pream                ; both either low or full, then no preamble
  763 T:1321  c9 00                              cmp #0             ; is device low
  764 T:1323  d0 09                              bne no_pream                ; no, device is high (and hub low, then no preamble)
  765 T:1325  a2 d8                              ldx #(27<<3)
  765 T:1327  20 00 00                           jsr rreg_x
  766 T:132a  09 04                              ora #$04
  767 T:132c  d0 07                              bne setit
  768 T:132e                           no_pream  
  769 T:132e  a2 d8                              ldx #(27<<3)
  769 T:1330  20 00 00                           jsr rreg_x
  770 T:1333  29 fb                              and #255-$04
  771 T:1335                           setit     

  781 T:1335  a2 d8                              ldx #(27<<3)
  781 T:1337  20 00 00                           jsr wreg_x
  782 T:133a  60                                 rts 
  783 T:133b                                     .) 

  785 T:133b                                    ; check USB device detection
  786 T:133b                                    ; C=1 device detected
  787 T:133b                                    ; C=0 device not present
  788 T:133b                           queryusbdevice .( 

  790 T:133b  a2 e8                              ldx #(29<<3)
  790 T:133d  a9 04                              lda #($04)
  790 T:133f  20 00 00                           jsr wreg_x

  792 T:1342                                    ; wait for end of sampling
  793 T:1342                                    ; Note: appnotes says SAMPLEBUS is cleared when sampling finished
  794 T:1342                                    ; however, it cannot be read. Other code just reads HSRL without further
  795 T:1342                                    ; ado. We wait for one frame
  796 T:1342  a9 01                              lda #1
  797 T:1344  20 00 00                           jsr pause

  799 T:1347                                    ; check bus status
  800 T:1347  a2 f8                              ldx #(31<<3)
  800 T:1349  20 00 00                           jsr rreg_x
  801 T:134c                                    ;inc $8027+80
  802 T:134c                                    ;sta $8026+80
  803 T:134c  29 c0                              and #$80+$40       ; if both are zero
  804 T:134e  f0 27                              beq nodevice
  805 T:1350  4a                                 lsr                    ; div by 2, so is $00/20/40/60, but never neg
  806 T:1351  8d 01 04                           sta polled             ; store whether device has been detected

  808 T:1354  a2 d8                              ldx #(27<<3)
  808 T:1356  20 00 00                           jsr rreg_x
  809 T:1359  29 02                              and #$02
  810 T:135b  f0 03                              beq highspeedcheck
  811 T:135d  a9 40                              lda #$80>>1       ; low speed check
  812 T:135f  2c                                 .byt $2c
  813 T:1360                           highspeedcheck 
  814 T:1360  a9 20                              lda #$40>>1
  815 T:1362  2d 01 04                           and polled
  816 T:1365  f0 03                              beq isfullspeed
  817 T:1367  a9 00                              lda #0             ; low speed
  818 T:1369  2c                                 .byt $2c
  819 T:136a                           isfullspeed 
  820 T:136a  a9 01                              lda #1
  821 T:136c  48                                 pha 
  822 T:136d                                    ; clear connect IRQ, as may be set by changing LOWSPEED or SAMPLEBUS
  823 T:136d  a2 c8                              ldx #(25<<3)
  823 T:136f  a9 20                              lda #($20)
  823 T:1371  20 00 00                           jsr wreg_x

  827 T:1374  68                                 pla 
  828 T:1375  38                                 sec 
  829 T:1376  60                                 rts 
  830 T:1377                           nodevice  
  831 T:1377  18                                 clc                    ; then no device - C=0 (0 is < 1)

  833 T:1378  60                                 rts 
  834 T:1379                                     .) 

  836 T:1379                                    ; reset the chip and USB 
  837 T:1379                                    ;1.  Set BUSRST = 1.
  838 T:1379                                    ;2.  Test for BUSRST = 0 or respond to the BUSEVENTIRQ.
  839 T:1379                                    ;3.  Turn on frame markers by setting SOFKAENAB = 1.
  840 T:1379                                    ;4.  Wait for at least one FRAMEIRQ.

  842 T:1379                           usbreset  .( 

  844 T:1379                                    ; switch off sof frames
  845 T:1379  a2 d8                              ldx #(27<<3)
  845 T:137b  20 00 00                           jsr rreg_x
  846 T:137e  29 f7                              and #255-$08
  847 T:1380  a2 d8                              ldx #(27<<3)
  847 T:1382  20 00 00                           jsr wreg_x

  849 T:1385                                    ; set BUSRST to 1
  850 T:1385  a2 e8                              ldx #(29<<3)
  850 T:1387  a9 01                              lda #($01)
  850 T:1389  20 00 00                           jsr wreg_x

  852 T:138c                                    ; wait for BUSRST to become 0
  853 T:138c  a2 e8                    l0        ldx #(29<<3)
  853 T:138e  20 00 00                           jsr rreg_x
  854 T:1391  29 01                              and #$01
  855 T:1393  d0 f7                              bne l0

  857 T:1395                           startsof  
  858 T:1395                                    ; clear frame irq
  859 T:1395  a2 c8                              ldx #(25<<3)
  859 T:1397  a9 40                              lda #($40)
  859 T:1399  20 00 00                           jsr wreg_x

  861 T:139c                                    ; turn on frame markers
  862 T:139c                                    ; When the CPU sets SOFKAENAB = 1, the SIE automatically generates 1-millisecond frame
  863 T:139c                                    ; markers. If the bit LOWSPEED = 0, the SIE generates SOF packets. If LOWSPEED = 1, the SIE
  864 T:139c                                    ; generates keep-alive pulses.
  865 T:139c  a2 d8                              ldx #(27<<3)
  865 T:139e  20 00 00                           jsr rreg_x
  866 T:13a1  09 08                              ora #$08
  867 T:13a3  a2 d8                              ldx #(27<<3)
  867 T:13a5  20 00 00                           jsr wreg_x

  869 T:13a8                                    ; The SOF or KA pulses start after the SOFKAENAB bit has asserted for 1 millisecond. If the
  870 T:13a8                                    ; CPU sets SOFKAENAB = 0 while the SIE is generating a frame marker, the SIE completes the
  871 T:13a8                                    ; signaling before shutting off the frame markers.
  872 T:13a8                                    ;
  873 T:13a8                                    ; wait for first frame
  874 T:13a8  a2 c8                    l1        ldx #(25<<3)
  874 T:13aa  20 00 00                           jsr rreg_x
  875 T:13ad  29 40                              and #$40
  876 T:13af  f0 f7                              beq l1
  877 T:13b1  a2 c8                              ldx #(25<<3)
  877 T:13b3  20 00 00                           jsr wreg_x

  879 T:13b6  60                                 rts 
  880 T:13b7                                     .) 

  883 T:13b7                                     .) 
